[INFO] Scanning for projects...
[INFO] 
[INFO] ---------------------< com.example:merged-project >---------------------
[INFO] Building merged-project 0.0.1-SNAPSHOT
[INFO]   from pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spring-boot:3.4.4:run (default-cli) > test-compile @ merged-project >>>
[INFO] 
[INFO] --- resources:3.3.1:resources (default-resources) @ merged-project ---
[INFO] Copying 1 resource from src/main/resources to target/classes
[INFO] Copying 1 resource from src/main/resources to target/classes
[INFO] 
[INFO] --- compiler:3.13.0:compile (default-compile) @ merged-project ---
[INFO] Nothing to compile - all classes are up to date.
[INFO] 
[INFO] --- resources:3.3.1:testResources (default-testResources) @ merged-project ---
[INFO] skip non existing resourceDirectory /Users/namu10x/workspace/AIMS/fetch-main/Backend/demo/src/test/resources
[INFO] 
[INFO] --- compiler:3.13.0:testCompile (default-testCompile) @ merged-project ---
[INFO] No sources to compile
[INFO] 
[INFO] <<< spring-boot:3.4.4:run (default-cli) < test-compile @ merged-project <<<
[INFO] 
[INFO] 
[INFO] --- spring-boot:3.4.4:run (default-cli) @ merged-project ---
[INFO] Attaching agents: []

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.4)

2025-06-25T17:41:05.096+07:00  INFO 85138 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Starting EcommerceApplication using Java 21.0.2 with PID 85138 (/Users/namu10x/workspace/AIMS/fetch-main/Backend/demo/target/classes started by namu10x in /Users/namu10x/workspace/AIMS/fetch-main/Backend/demo)
2025-06-25T17:41:05.097+07:00 DEBUG 85138 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Running with Spring Boot v3.4.4, Spring v6.2.5
2025-06-25T17:41:05.097+07:00  INFO 85138 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : No active profile set, falling back to 1 default profile: "default"
2025-06-25T17:41:05.121+07:00  INFO 85138 --- [demo] [  restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-25T17:41:05.121+07:00  INFO 85138 --- [demo] [  restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-25T17:41:05.384+07:00  INFO 85138 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25T17:41:05.384+07:00  INFO 85138 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25T17:41:05.422+07:00  INFO 85138 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 33 ms. Found 13 JPA repository interfaces.
2025-06-25T17:41:05.863+07:00  INFO 85138 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-25T17:41:05.871+07:00  INFO 85138 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-25T17:41:05.872+07:00  INFO 85138 --- [demo] [  restartedMain] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-06-25T17:41:05.947+07:00  INFO 85138 --- [demo] [  restartedMain] org.apache.jasper.servlet.TldScanner     : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2025-06-25T17:41:05.949+07:00  INFO 85138 --- [demo] [  restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-06-25T17:41:05.950+07:00  INFO 85138 --- [demo] [  restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 828 ms
2025-06-25T17:41:06.032+07:00  INFO 85138 --- [demo] [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-25T17:41:06.066+07:00  INFO 85138 --- [demo] [  restartedMain] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.6.11.Final
2025-06-25T17:41:06.084+07:00  INFO 85138 --- [demo] [  restartedMain] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-25T17:41:06.218+07:00  INFO 85138 --- [demo] [  restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25T17:41:06.233+07:00  INFO 85138 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-06-25T17:41:06.644+07:00  INFO 85138 --- [demo] [  restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection org.sqlite.jdbc4.JDBC4Connection@55ed2a50
2025-06-25T17:41:06.645+07:00  INFO 85138 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-06-25T17:41:06.666+07:00  INFO 85138 --- [demo] [  restartedMain] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 3.47.2
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-25T17:41:07.247+07:00 DEBUG 85138 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HT_products(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
Hibernate: 
    create table HT_products(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
2025-06-25T17:41:07.252+07:00 DEBUG 85138 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_products(duration_minutes integer, page_count integer, price integer, product_value integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), category varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_products(duration_minutes integer, page_count integer, price integer, product_value integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), category varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-25T17:41:07.252+07:00 DEBUG 85138 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_dvds(duration_minutes integer, price integer, product_value integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), category varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_dvds(duration_minutes integer, price integer, product_value integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), category varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-25T17:41:07.253+07:00 DEBUG 85138 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_books(page_count integer, price integer, product_value integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), category varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_books(page_count integer, price integer, product_value integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), category varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-25T17:41:07.255+07:00 DEBUG 85138 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_lp(price integer, product_value integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), category varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_lp(price integer, product_value integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), category varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-25T17:41:07.256+07:00 DEBUG 85138 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_cds(price integer, product_value integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), category varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_cds(price integer, product_value integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), category varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-25T17:41:07.338+07:00  INFO 85138 --- [demo] [  restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-25T17:41:07.359+07:00 DEBUG 85138 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
Hibernate: 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
2025-06-25T17:41:07.360+07:00  INFO 85138 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25T17:41:07.513+07:00  INFO 85138 --- [demo] [  restartedMain] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-25T17:41:09.258+07:00  WARN 85138 --- [demo] [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-25T17:41:09.269+07:00  INFO 85138 --- [demo] [  restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2025-06-25T17:41:09.312+07:00 DEBUG 85138 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : 68 mappings in 'requestMappingHandlerMapping'
2025-06-25T17:41:09.355+07:00 DEBUG 85138 --- [demo] [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-25T17:41:09.371+07:00 DEBUG 85138 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-25T17:41:09.396+07:00  WARN 85138 --- [demo] [  restartedMain] ion$DefaultTemplateResolverConfiguration : Cannot find template location: classpath:/templates/ (please add some templates, check your Thymeleaf configuration, or set spring.thymeleaf.check-template-location=false)
2025-06-25T17:41:09.411+07:00 DEBUG 85138 --- [demo] [  restartedMain] .m.m.a.ExceptionHandlerExceptionResolver : ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-25T17:41:09.459+07:00  INFO 85138 --- [demo] [  restartedMain] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:sqlite:./data/ITSS_demo2.db'
2025-06-25T17:41:09.492+07:00  INFO 85138 --- [demo] [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2025-06-25T17:41:09.513+07:00  INFO 85138 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-06-25T17:41:09.518+07:00  INFO 85138 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Started EcommerceApplication in 4.615 seconds (process running for 4.816)
2025-06-25T17:41:09.743+07:00  INFO 85138 --- [demo] [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-25T17:41:09.744+07:00  INFO 85138 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2025-06-25T17:41:09.744+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected StandardServletMultipartResolver
2025-06-25T17:41:09.744+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected AcceptHeaderLocaleResolver
2025-06-25T17:41:09.744+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected FixedThemeResolver
2025-06-25T17:41:09.744+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@7f62f611
2025-06-25T17:41:09.745+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected org.springframework.web.servlet.support.SessionFlashMapManager@2249d1f0
2025-06-25T17:41:09.745+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-06-25T17:41:09.745+07:00  INFO 85138 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2025-06-25T17:41:09.749+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-25T17:41:09.753+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-25T17:41:09.775+07:00  INFO 85138 --- [demo] [nio-8080-exec-1] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-25T17:41:09.778+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-1] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-25T17:41:09.808+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.category,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        products p1_0 
    left join
        books p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cds p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvds p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.category,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        products p1_0 
    left join
        books p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cds p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvds p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-25T17:41:09.852+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-25T17:41:09.858+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-25T17:41:09.873+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-25T17:41:13.921+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-25T17:41:13.921+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-25T17:41:13.927+07:00  INFO 85138 --- [demo] [nio-8080-exec-2] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-25T17:41:13.928+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-2] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-25T17:41:13.930+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.category,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        products p1_0 
    left join
        books p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cds p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvds p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.category,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        products p1_0 
    left join
        books p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cds p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvds p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-25T17:41:13.934+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-25T17:41:13.935+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-25T17:41:13.937+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-25T17:41:21.020+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : GET "/api/products/3", parameters={}
2025-06-25T17:41:21.021+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-3] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getProductById(Long)
2025-06-25T17:41:21.029+07:00  INFO 85138 --- [demo] [nio-8080-exec-3] c.i.e.controller.ProductController       : GET /api/products/3 - Fetching product
2025-06-25T17:41:21.029+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-3] c.itss.ecommerce.service.ProductService  : Fetching product by ID: 3
2025-06-25T17:41:21.032+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.category,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        products p1_0 
    left join
        books p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cds p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvds p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.category,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        products p1_0 
    left join
        books p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cds p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvds p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-25T17:41:21.034+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-25T17:41:21.035+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Operation completed successfully, data=ProductDTO(productId=3, tit (truncated)...]
2025-06-25T17:41:21.036+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-25T17:41:38.261+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : GET "/api/products/search?title=&type=", parameters={masked}
2025-06-25T17:41:38.262+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-4] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#searchProducts(String, String, Integer, Integer, Boolean)
2025-06-25T17:41:38.266+07:00  INFO 85138 --- [demo] [nio-8080-exec-4] c.i.e.controller.ProductController       : GET /api/products/search - Searching products with criteria
2025-06-25T17:41:38.266+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-4] c.itss.ecommerce.service.ProductService  : Searching products with criteria - title: , type: , minPrice: null, maxPrice: null, inStock: null
2025-06-25T17:41:38.283+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.category,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        products p1_0 
    left join
        books p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cds p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvds p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        (
            ? is null 
            or lower(p1_0.title) like lower(('%'||?||'%'))
        ) 
        and (
            ? is null 
            or p1_0.type=?
        ) 
        and (
            ? is null 
            or p1_0.price>=?
        ) 
        and (
            ? is null 
            or p1_0.price<=?
        ) 
        and (
            ? is null 
            or (
                ?=1 
                and p1_0.quantity>0
            ) 
            or (
                ?=0
            )
        )
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.category,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        products p1_0 
    left join
        books p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cds p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvds p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        (
            ? is null 
            or lower(p1_0.title) like lower(('%'||?||'%'))
        ) 
        and (
            ? is null 
            or p1_0.type=?
        ) 
        and (
            ? is null 
            or p1_0.price>=?
        ) 
        and (
            ? is null 
            or p1_0.price<=?
        ) 
        and (
            ? is null 
            or (
                ?=1 
                and p1_0.quantity>0
            ) 
            or (
                ?=0
            )
        )
2025-06-25T17:41:38.285+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-25T17:41:38.285+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products matching criteria, data=[], errorCode=null, times (truncated)...]
2025-06-25T17:41:38.286+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-25T17:41:42.133+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : GET "/api/products/search?title=A&type=", parameters={masked}
2025-06-25T17:41:42.133+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-5] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#searchProducts(String, String, Integer, Integer, Boolean)
2025-06-25T17:41:42.134+07:00  INFO 85138 --- [demo] [nio-8080-exec-5] c.i.e.controller.ProductController       : GET /api/products/search - Searching products with criteria
2025-06-25T17:41:42.134+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-5] c.itss.ecommerce.service.ProductService  : Searching products with criteria - title: A, type: , minPrice: null, maxPrice: null, inStock: null
2025-06-25T17:41:42.136+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.category,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        products p1_0 
    left join
        books p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cds p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvds p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        (
            ? is null 
            or lower(p1_0.title) like lower(('%'||?||'%'))
        ) 
        and (
            ? is null 
            or p1_0.type=?
        ) 
        and (
            ? is null 
            or p1_0.price>=?
        ) 
        and (
            ? is null 
            or p1_0.price<=?
        ) 
        and (
            ? is null 
            or (
                ?=1 
                and p1_0.quantity>0
            ) 
            or (
                ?=0
            )
        )
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.category,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        products p1_0 
    left join
        books p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cds p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvds p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        (
            ? is null 
            or lower(p1_0.title) like lower(('%'||?||'%'))
        ) 
        and (
            ? is null 
            or p1_0.type=?
        ) 
        and (
            ? is null 
            or p1_0.price>=?
        ) 
        and (
            ? is null 
            or p1_0.price<=?
        ) 
        and (
            ? is null 
            or (
                ?=1 
                and p1_0.quantity>0
            ) 
            or (
                ?=0
            )
        )
2025-06-25T17:41:42.137+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-25T17:41:42.137+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products matching criteria, data=[], errorCode=null, times (truncated)...]
2025-06-25T17:41:42.137+07:00 DEBUG 85138 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
