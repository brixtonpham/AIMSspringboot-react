[[1;34mINFO[m] Scanning for projects...
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m---------------------< [0;36mcom.example:merged-project[0;1m >---------------------[m
[[1;34mINFO[m] [1mBuilding merged-project 0.0.1-SNAPSHOT[m
[[1;34mINFO[m] [1m--------------------------------[ war ]---------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m>>> [0;32mspring-boot-maven-plugin:3.4.4:run[m [1m(default-cli)[0;1m > [0;1mtest-compile[m @ [36mmerged-project[0;1m >>>[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:3.3.1:resources[m [1m(default-resources)[m @ [36mmerged-project[0;1m ---[m
[[1;34mINFO[m] Copying 1 resource from src/main/resources to target/classes
[[1;34mINFO[m] Copying 5 resources from src/main/resources to target/classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.13.0:compile[m [1m(default-compile)[m @ [36mmerged-project[0;1m ---[m
[[1;34mINFO[m] Nothing to compile - all classes are up to date.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:3.3.1:testResources[m [1m(default-testResources)[m @ [36mmerged-project[0;1m ---[m
[[1;34mINFO[m] skip non existing resourceDirectory /home/bxs/AIMSspringboot-react/src/test/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.13.0:testCompile[m [1m(default-testCompile)[m @ [36mmerged-project[0;1m ---[m
[[1;34mINFO[m] No sources to compile
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m<<< [0;32mspring-boot-maven-plugin:3.4.4:run[m [1m(default-cli)[0;1m < [0;1mtest-compile[m @ [36mmerged-project[0;1m <<<[m
[[1;34mINFO[m] 
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mspring-boot-maven-plugin:3.4.4:run[m [1m(default-cli)[m @ [36mmerged-project[0;1m ---[m
[[1;34mINFO[m] Attaching agents: []

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.4)

2025-06-28T18:54:05.293+07:00  INFO 77427 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Starting EcommerceApplication using Java 21.0.6 with PID 77427 (/home/bxs/AIMSspringboot-react/target/classes started by bxs in /home/bxs/AIMSspringboot-react)
2025-06-28T18:54:05.294+07:00 DEBUG 77427 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Running with Spring Boot v3.4.4, Spring v6.2.5
2025-06-28T18:54:05.295+07:00  INFO 77427 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : No active profile set, falling back to 1 default profile: "default"
2025-06-28T18:54:05.333+07:00  INFO 77427 --- [demo] [  restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-28T18:54:05.333+07:00  INFO 77427 --- [demo] [  restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-28T18:54:05.774+07:00  INFO 77427 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-28T18:54:05.774+07:00  INFO 77427 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-28T18:54:05.847+07:00  INFO 77427 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 65 ms. Found 12 JPA repository interfaces.
2025-06-28T18:54:06.479+07:00  INFO 77427 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-28T18:54:06.490+07:00  INFO 77427 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-28T18:54:06.491+07:00  INFO 77427 --- [demo] [  restartedMain] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-06-28T18:54:06.650+07:00  INFO 77427 --- [demo] [  restartedMain] org.apache.jasper.servlet.TldScanner     : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2025-06-28T18:54:06.655+07:00  INFO 77427 --- [demo] [  restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-06-28T18:54:06.656+07:00  INFO 77427 --- [demo] [  restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1322 ms
2025-06-28T18:54:06.772+07:00  INFO 77427 --- [demo] [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-28T18:54:06.807+07:00  INFO 77427 --- [demo] [  restartedMain] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.6.11.Final
2025-06-28T18:54:06.828+07:00  INFO 77427 --- [demo] [  restartedMain] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-28T18:54:07.026+07:00  INFO 77427 --- [demo] [  restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-28T18:54:07.047+07:00  INFO 77427 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-06-28T18:54:07.167+07:00  INFO 77427 --- [demo] [  restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection org.sqlite.jdbc4.JDBC4Connection@fac6493
2025-06-28T18:54:07.169+07:00  INFO 77427 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-06-28T18:54:07.205+07:00  INFO 77427 --- [demo] [  restartedMain] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 3.47.2
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-28T18:54:08.204+07:00 DEBUG 77427 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
Hibernate: 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
2025-06-28T18:54:08.210+07:00 DEBUG 77427 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T18:54:08.211+07:00 DEBUG 77427 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T18:54:08.212+07:00 DEBUG 77427 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T18:54:08.213+07:00 DEBUG 77427 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T18:54:08.214+07:00 DEBUG 77427 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T18:54:08.342+07:00  INFO 77427 --- [demo] [  restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-28T18:54:08.375+07:00  INFO 77427 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T18:54:08.552+07:00  INFO 77427 --- [demo] [  restartedMain] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-28T18:54:11.354+07:00  WARN 77427 --- [demo] [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-28T18:54:11.375+07:00  INFO 77427 --- [demo] [  restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2025-06-28T18:54:11.458+07:00 DEBUG 77427 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : 79 mappings in 'requestMappingHandlerMapping'
2025-06-28T18:54:11.529+07:00 DEBUG 77427 --- [demo] [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-28T18:54:11.579+07:00 DEBUG 77427 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-28T18:54:11.622+07:00 DEBUG 77427 --- [demo] [  restartedMain] .m.m.a.ExceptionHandlerExceptionResolver : ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-28T18:54:11.729+07:00  INFO 77427 --- [demo] [  restartedMain] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:sqlite:./data/ITSS_demo2.db'
2025-06-28T18:54:11.776+07:00  INFO 77427 --- [demo] [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2025-06-28T18:54:11.826+07:00  INFO 77427 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-06-28T18:54:11.838+07:00  INFO 77427 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Started EcommerceApplication in 6.861 seconds (process running for 7.182)
2025-06-28T18:54:11.895+07:00  INFO 77427 --- [demo] [nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-28T18:54:11.895+07:00  INFO 77427 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2025-06-28T18:54:11.896+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Detected StandardServletMultipartResolver
2025-06-28T18:54:11.896+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Detected AcceptHeaderLocaleResolver
2025-06-28T18:54:11.896+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Detected FixedThemeResolver
2025-06-28T18:54:11.897+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@36ee9c44
2025-06-28T18:54:11.898+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Detected org.springframework.web.servlet.support.SessionFlashMapManager@40a500f0
2025-06-28T18:54:11.898+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-06-28T18:54:11.898+07:00  INFO 77427 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2025-06-28T18:54:11.905+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T18:54:11.910+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T18:54:11.949+07:00  INFO 77427 --- [demo] [nio-8080-exec-2] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T18:54:11.953+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-2] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T18:54:11.998+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T18:54:12.058+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-28T18:54:12.067+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-28T18:54:12.090+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T18:54:21.279+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T18:54:21.280+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T18:54:21.291+07:00  INFO 77427 --- [demo] [nio-8080-exec-1] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T18:54:21.292+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-1] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T18:54:21.293+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T18:54:21.297+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T18:54:21.298+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-28T18:54:21.301+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T18:54:25.365+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : OPTIONS "/api/cart/check-quantities", parameters={}
2025-06-28T18:54:25.366+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-3] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.CartController#checkQuantities(CartCheckRequest)
2025-06-28T18:54:25.367+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T18:54:25.373+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : POST "/api/cart/check-quantities", parameters={}
2025-06-28T18:54:25.373+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-4] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.CartController#checkQuantities(CartCheckRequest)
2025-06-28T18:54:25.411+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-4] m.m.a.RequestResponseBodyMethodProcessor : Read "application/json;charset=UTF-8" to [CartCheckRequest(items=[CartCheckRequest.CartItem(productId=1, quantity=1), CartCheckRequest.CartIte (truncated)...]
2025-06-28T18:54:25.423+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T18:54:25.425+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T18:54:25.429+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-4] m.m.a.RequestResponseBodyMethodProcessor : Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-28T18:54:25.430+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-4] m.m.a.RequestResponseBodyMethodProcessor : Writing [CartCheckResponse(ok=true, insufficient=[])]
2025-06-28T18:54:25.431+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T18:54:52.021+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : OPTIONS "/api/orders", parameters={}
2025-06-28T18:54:52.022+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-5] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#createOrder(CreateOrderRequest)
2025-06-28T18:54:52.023+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T18:54:52.026+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : POST "/api/orders", parameters={}
2025-06-28T18:54:52.027+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#createOrder(CreateOrderRequest)
2025-06-28T18:54:52.042+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] m.m.a.RequestResponseBodyMethodProcessor : Read "application/json;charset=UTF-8" to [CreateOrderRequest(cartItems=[CreateOrderRequest.CartItemDTO(productId=1, quantity=1, rushOrder=fals (truncated)...]
2025-06-28T18:54:52.109+07:00  INFO 77427 --- [demo] [nio-8080-exec-6] c.i.e.controller.OrderController         : POST /api/orders - Creating new order with 2 items
2025-06-28T18:54:52.110+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] c.itss.ecommerce.service.ProductService  : Fetching product by ID: 1
2025-06-28T18:54:52.111+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T18:54:52.112+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] c.itss.ecommerce.service.ProductService  : Fetching product by ID: 2
2025-06-28T18:54:52.113+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T18:54:52.115+07:00  INFO 77427 --- [demo] [nio-8080-exec-6] c.itss.ecommerce.service.OrderService    : Creating order with 2 items
2025-06-28T18:54:52.128+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    insert 
    into
        delivery_information
        (address, delivery_fee, delivery_message, district, email, name, phone, province, ward) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        delivery_information
        (address, delivery_fee, delivery_message, district, email, name, phone, province, ward) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-28T18:54:52.131+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T18:54:52.148+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    insert 
    into
        order_items
        (created_at, delivery_id, status, total_after_vat, total_before_vat, updated_at, vat_percentage) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        order_items
        (created_at, delivery_id, status, total_after_vat, total_before_vat, updated_at, vat_percentage) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-28T18:54:52.149+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T18:54:52.151+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    insert 
    into
        order_item
        (delivery_time, instructions, order_id, product_id, quantity, rush_order_using, status, total_fee) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        order_item
        (delivery_time, instructions, order_id, product_id, quantity, rush_order_using, status, total_fee) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-06-28T18:54:52.152+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T18:54:52.152+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    insert 
    into
        order_item
        (delivery_time, instructions, order_id, product_id, quantity, rush_order_using, status, total_fee) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        order_item
        (delivery_time, instructions, order_id, product_id, quantity, rush_order_using, status, total_fee) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-06-28T18:54:52.152+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T18:54:52.154+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    insert 
    into
        invoice
        (created_at, description, order_id, paid_at, payment_method, payment_status) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        invoice
        (created_at, description, order_id, paid_at, payment_method, payment_status) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-28T18:54:52.154+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T18:54:52.155+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] c.i.ecommerce.service.AuditLogService    : Logging ORDER operation on Order with ID: 10 by user: null
2025-06-28T18:54:52.156+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    insert 
    into
        audit_log
        (action_name, action_type, entity_id, entity_type, note, recorded_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        audit_log
        (action_name, action_type, entity_id, entity_type, note, recorded_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-28T18:54:52.157+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T18:54:52.158+07:00  INFO 77427 --- [demo] [nio-8080-exec-6] c.itss.ecommerce.service.OrderService    : Order created successfully with ID: 10
2025-06-28T18:54:52.172+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    update
        product 
    set
        barcode=?,
        condition=?,
        created_at=?,
        dimensions=?,
        image_url=?,
        import_date=?,
        introduction=?,
        price=?,
        quantity=?,
        rush_order_supported=?,
        title=?,
        updated_at=?,
        weight=? 
    where
        product_id=?
Hibernate: 
    update
        product 
    set
        barcode=?,
        condition=?,
        created_at=?,
        dimensions=?,
        image_url=?,
        import_date=?,
        introduction=?,
        price=?,
        quantity=?,
        rush_order_supported=?,
        title=?,
        updated_at=?,
        weight=? 
    where
        product_id=?
2025-06-28T18:54:52.174+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    update
        product 
    set
        barcode=?,
        condition=?,
        created_at=?,
        dimensions=?,
        image_url=?,
        import_date=?,
        introduction=?,
        price=?,
        quantity=?,
        rush_order_supported=?,
        title=?,
        updated_at=?,
        weight=? 
    where
        product_id=?
Hibernate: 
    update
        product 
    set
        barcode=?,
        condition=?,
        created_at=?,
        dimensions=?,
        image_url=?,
        import_date=?,
        introduction=?,
        price=?,
        quantity=?,
        rush_order_supported=?,
        title=?,
        updated_at=?,
        weight=? 
    where
        product_id=?
Saved Order: 10
2025-06-28T18:54:52.191+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T18:54:52.196+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Order created successfully, data=OrderDTO(orderId=10, totalBeforeV (truncated)...]
2025-06-28T18:54:52.205+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : Completed 201 CREATED
2025-06-28T18:54:52.209+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : OPTIONS "/api/payment/vnpay", parameters={}
2025-06-28T18:54:52.209+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-7] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.vnpay.VNPayController#createPayment(PaymentRequest, HttpServletRequest)
2025-06-28T18:54:52.210+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T18:54:52.212+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : POST "/api/payment/vnpay", parameters={}
2025-06-28T18:54:52.212+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-8] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.vnpay.VNPayController#createPayment(PaymentRequest, HttpServletRequest)
2025-06-28T18:54:52.214+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-8] m.m.a.RequestResponseBodyMethodProcessor : Read "application/json;charset=UTF-8" to [com.itss.ecommerce.dto.vnpay.PaymentRequest@228c7e19]
2025-06-28T18:54:52.227+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-28T18:54:52.227+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [com.itss.ecommerce.service.VNPayService$PaymentResponse@a1f67f6]
2025-06-28T18:54:52.228+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T18:55:28.572+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : GET "/api/payment/vnpay/return?vnp_Amount=31050000&vnp_BankCode=NCB&vnp_BankTranNo=VNP15044443&vnp_CardType=ATM&vnp_OrderInfo=Thanh+toan+don+hang%3A10&vnp_PayDate=20250628185610&vnp_ResponseCode=00&vnp_TmnCode=YFW5M6GN&vnp_TransactionNo=15044443&vnp_TransactionStatus=00&vnp_TxnRef=10&vnp_SecureHash=d2147715d728a786b086bbcaecf75b41f5a3e505ddbdd8c099ff9cf45e51e9b14650854a6e01245f425bce208edc55f6b92c1f5e681e4fcaeb30fcb5e20ee088", parameters={masked}
2025-06-28T18:55:28.573+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-9] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.vnpay.VNPayController#returnPage(Map, HttpServletRequest)
2025-06-28T18:55:28.588+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-9] c.itss.ecommerce.service.OrderService    : Fetching order by ID: 10
2025-06-28T18:55:28.592+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        o1_0.order_id,
        o1_0.created_at,
        o1_0.delivery_id,
        o1_0.status,
        o1_0.total_after_vat,
        o1_0.total_before_vat,
        o1_0.updated_at,
        o1_0.vat_percentage 
    from
        order_items o1_0 
    where
        o1_0.order_id=?
Hibernate: 
    select
        o1_0.order_id,
        o1_0.created_at,
        o1_0.delivery_id,
        o1_0.status,
        o1_0.total_after_vat,
        o1_0.total_before_vat,
        o1_0.updated_at,
        o1_0.vat_percentage 
    from
        order_items o1_0 
    where
        o1_0.order_id=?
2025-06-28T18:55:28.616+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T18:55:28.621+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Sending email to: admin@itss.com
2025-06-28T18:55:28.624+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T18:55:28.629+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T18:55:28.630+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
DEBUG: Jakarta Mail version 2.1.3
DEBUG: URL jar:file:/home/bxs/.m2/repository/org/eclipse/angus/jakarta.mail/2.0.3/jakarta.mail-2.0.3.jar!/META-INF/javamail.providers
DEBUG: successfully loaded resource: jar:file:/home/bxs/.m2/repository/org/eclipse/angus/jakarta.mail/2.0.3/jakarta.mail-2.0.3.jar!/META-INF/javamail.providers
DEBUG: successfully loaded resource: /META-INF/javamail.default.providers
DEBUG: Tables of loaded providers
DEBUG: Providers Listed By Class Name: {org.eclipse.angus.mail.imap.IMAPStore=jakarta.mail.Provider[STORE,imap,org.eclipse.angus.mail.imap.IMAPStore,Oracle], org.eclipse.angus.mail.smtp.SMTPTransport=jakarta.mail.Provider[TRANSPORT,smtp,org.eclipse.angus.mail.smtp.SMTPTransport,Oracle], org.eclipse.angus.mail.pop3.POP3Store=jakarta.mail.Provider[STORE,pop3,org.eclipse.angus.mail.pop3.POP3Store,Oracle], org.eclipse.angus.mail.pop3.POP3SSLStore=jakarta.mail.Provider[STORE,pop3s,org.eclipse.angus.mail.pop3.POP3SSLStore,Oracle], org.eclipse.angus.mail.smtp.SMTPSSLTransport=jakarta.mail.Provider[TRANSPORT,smtps,org.eclipse.angus.mail.smtp.SMTPSSLTransport,Oracle], org.eclipse.angus.mail.imap.IMAPSSLStore=jakarta.mail.Provider[STORE,imaps,org.eclipse.angus.mail.imap.IMAPSSLStore,Oracle]}
DEBUG: Providers Listed By Protocol: {imap=jakarta.mail.Provider[STORE,imap,org.eclipse.angus.mail.imap.IMAPStore,Oracle], smtp=jakarta.mail.Provider[TRANSPORT,smtp,org.eclipse.angus.mail.smtp.SMTPTransport,Oracle], pop3=jakarta.mail.Provider[STORE,pop3,org.eclipse.angus.mail.pop3.POP3Store,Oracle], imaps=jakarta.mail.Provider[STORE,imaps,org.eclipse.angus.mail.imap.IMAPSSLStore,Oracle], smtps=jakarta.mail.Provider[TRANSPORT,smtps,org.eclipse.angus.mail.smtp.SMTPSSLTransport,Oracle], pop3s=jakarta.mail.Provider[STORE,pop3s,org.eclipse.angus.mail.pop3.POP3SSLStore,Oracle]}
DEBUG: successfully loaded resource: /META-INF/javamail.default.address.map
DEBUG: URL jar:file:/home/bxs/.m2/repository/org/eclipse/angus/jakarta.mail/2.0.3/jakarta.mail-2.0.3.jar!/META-INF/javamail.address.map
DEBUG: successfully loaded resource: jar:file:/home/bxs/.m2/repository/org/eclipse/angus/jakarta.mail/2.0.3/jakarta.mail-2.0.3.jar!/META-INF/javamail.address.map
DEBUG: getProvider() returning jakarta.mail.Provider[TRANSPORT,smtp,org.eclipse.angus.mail.smtp.SMTPTransport,Oracle]
DEBUG SMTP: useEhlo true, useAuth true
DEBUG SMTP: trying to connect to host "smtp.gmail.com", port 587, isSSL false
220 smtp.gmail.com ESMTP d2e1a72fcca58-74af541e655sm4404403b3a.65 - gsmtp
DEBUG SMTP: connected to host "smtp.gmail.com", port: 587
EHLO bxs
250-smtp.gmail.com at your service, [222.254.16.79]
250-SIZE 35882577
250-8BITMIME
250-STARTTLS
250-ENHANCEDSTATUSCODES
250-PIPELINING
250-CHUNKING
250 SMTPUTF8
DEBUG SMTP: Found extension "SIZE", arg "35882577"
DEBUG SMTP: Found extension "8BITMIME", arg ""
DEBUG SMTP: Found extension "STARTTLS", arg ""
DEBUG SMTP: Found extension "ENHANCEDSTATUSCODES", arg ""
DEBUG SMTP: Found extension "PIPELINING", arg ""
DEBUG SMTP: Found extension "CHUNKING", arg ""
DEBUG SMTP: Found extension "SMTPUTF8", arg ""
STARTTLS
220 2.0.0 Ready to start TLS
EHLO bxs
250-smtp.gmail.com at your service, [222.254.16.79]
250-SIZE 35882577
250-8BITMIME
250-AUTH LOGIN PLAIN XOAUTH2 PLAIN-CLIENTTOKEN OAUTHBEARER XOAUTH
250-ENHANCEDSTATUSCODES
250-PIPELINING
250-CHUNKING
250 SMTPUTF8
DEBUG SMTP: Found extension "SIZE", arg "35882577"
DEBUG SMTP: Found extension "8BITMIME", arg ""
DEBUG SMTP: Found extension "AUTH", arg "LOGIN PLAIN XOAUTH2 PLAIN-CLIENTTOKEN OAUTHBEARER XOAUTH"
DEBUG SMTP: Found extension "ENHANCEDSTATUSCODES", arg ""
DEBUG SMTP: Found extension "PIPELINING", arg ""
DEBUG SMTP: Found extension "CHUNKING", arg ""
DEBUG SMTP: Found extension "SMTPUTF8", arg ""
DEBUG SMTP: protocolConnect login, host=smtp.gmail.com, user=bxson1412@gmail.com, password=<non-null>
DEBUG SMTP: Attempt to authenticate using mechanisms: LOGIN PLAIN DIGEST-MD5 NTLM XOAUTH2 
DEBUG SMTP: Using mechanism LOGIN
DEBUG SMTP: AUTH LOGIN command trace suppressed
DEBUG SMTP: AUTH LOGIN succeeded
DEBUG SMTP: use8bit false
MAIL FROM:<bxs@bxs>
250 2.1.0 OK d2e1a72fcca58-74af541e655sm4404403b3a.65 - gsmtp
RCPT TO:<admin@itss.com>
250 2.1.5 OK d2e1a72fcca58-74af541e655sm4404403b3a.65 - gsmtp
DEBUG SMTP: Verified Addresses
DEBUG SMTP:   admin@itss.com
DATA
354 Go ahead d2e1a72fcca58-74af541e655sm4404403b3a.65 - gsmtp
Date: Sat, 28 Jun 2025 18:55:31 +0700 (ICT)
To: admin@itss.com
Message-ID: <761394339.0.1751111731380@bxs>
Subject: Order Confirmation - Order #10
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Dear Admin User,

Thank you for your order! Your order has been confirmed.

Order Details:
Order ID: 10
Total Amount: $280500

Items Ordered:
- The Great Gatsby (extended) (Quantity: 1) - $120000
- To Kill a Mockingbird (Quantity: 1) - $135000

Delivery Information:
Name: Admin User
Phone: 0123456789
Address: S=E1=BB=91 8 - Ng=C3=B5 10 - =C4=90=C6=B0=E1=BB=9Dng 12

We will notify you when your order is shipped.

Thank you for shopping with us!
Best regards,
ITSS E-commerce Team
.
250 2.0.0 OK  1751111733 d2e1a72fcca58-74af541e655sm4404403b3a.65 - gsmtp
DEBUG SMTP: message successfully delivered to mail server
QUIT
221 2.0.0 closing connection d2e1a72fcca58-74af541e655sm4404403b3a.65 - gsmtp
Email sent successfully to: admin@itss.com
2025-06-28T18:55:33.684+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-9] o.s.web.servlet.view.RedirectView        : View [RedirectView], model {}
2025-06-28T18:55:33.690+07:00 DEBUG 77427 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : Completed 302 FOUND
