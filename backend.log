[[1;34mINFO[m] Scanning for projects...
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m---------------------< [0;36mcom.example:merged-project[0;1m >---------------------[m
[[1;34mINFO[m] [1mBuilding merged-project 0.0.1-SNAPSHOT[m
[[1;34mINFO[m] [1m--------------------------------[ war ]---------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m>>> [0;32mspring-boot-maven-plugin:3.4.4:run[m [1m(default-cli)[0;1m > [0;1mtest-compile[m @ [36mmerged-project[0;1m >>>[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:3.3.1:resources[m [1m(default-resources)[m @ [36mmerged-project[0;1m ---[m
[[1;34mINFO[m] Copying 1 resource from src/main/resources to target/classes
[[1;34mINFO[m] Copying 5 resources from src/main/resources to target/classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.13.0:compile[m [1m(default-compile)[m @ [36mmerged-project[0;1m ---[m
[[1;34mINFO[m] Nothing to compile - all classes are up to date.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:3.3.1:testResources[m [1m(default-testResources)[m @ [36mmerged-project[0;1m ---[m
[[1;34mINFO[m] skip non existing resourceDirectory /home/bxs/AIMSspringboot-react/src/test/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.13.0:testCompile[m [1m(default-testCompile)[m @ [36mmerged-project[0;1m ---[m
[[1;34mINFO[m] No sources to compile
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m<<< [0;32mspring-boot-maven-plugin:3.4.4:run[m [1m(default-cli)[0;1m < [0;1mtest-compile[m @ [36mmerged-project[0;1m <<<[m
[[1;34mINFO[m] 
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mspring-boot-maven-plugin:3.4.4:run[m [1m(default-cli)[m @ [36mmerged-project[0;1m ---[m
[[1;34mINFO[m] Attaching agents: []

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.4)

2025-06-28T03:31:45.597+07:00  INFO 37568 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Starting EcommerceApplication using Java 21.0.6 with PID 37568 (/home/bxs/AIMSspringboot-react/target/classes started by bxs in /home/bxs/AIMSspringboot-react)
2025-06-28T03:31:45.600+07:00 DEBUG 37568 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Running with Spring Boot v3.4.4, Spring v6.2.5
2025-06-28T03:31:45.601+07:00  INFO 37568 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : No active profile set, falling back to 1 default profile: "default"
2025-06-28T03:31:45.699+07:00  INFO 37568 --- [demo] [  restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-28T03:31:45.700+07:00  INFO 37568 --- [demo] [  restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-28T03:31:46.311+07:00  INFO 37568 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-28T03:31:46.311+07:00  INFO 37568 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-28T03:31:46.386+07:00  INFO 37568 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 67 ms. Found 12 JPA repository interfaces.
2025-06-28T03:31:47.042+07:00  INFO 37568 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-28T03:31:47.053+07:00  INFO 37568 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-28T03:31:47.054+07:00  INFO 37568 --- [demo] [  restartedMain] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-06-28T03:31:47.221+07:00  INFO 37568 --- [demo] [  restartedMain] org.apache.jasper.servlet.TldScanner     : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2025-06-28T03:31:47.227+07:00  INFO 37568 --- [demo] [  restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-06-28T03:31:47.228+07:00  INFO 37568 --- [demo] [  restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1527 ms
2025-06-28T03:31:47.355+07:00  INFO 37568 --- [demo] [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-28T03:31:47.393+07:00  INFO 37568 --- [demo] [  restartedMain] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.6.11.Final
2025-06-28T03:31:47.418+07:00  INFO 37568 --- [demo] [  restartedMain] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-28T03:31:47.642+07:00  INFO 37568 --- [demo] [  restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-28T03:31:47.666+07:00  INFO 37568 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-06-28T03:31:47.786+07:00  INFO 37568 --- [demo] [  restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection org.sqlite.jdbc4.JDBC4Connection@5a2c3c76
2025-06-28T03:31:47.788+07:00  INFO 37568 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-06-28T03:31:47.816+07:00  INFO 37568 --- [demo] [  restartedMain] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 3.47.2
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-28T03:31:48.803+07:00 DEBUG 37568 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
Hibernate: 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
2025-06-28T03:31:48.810+07:00 DEBUG 37568 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, product_value integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, product_value integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T03:31:48.811+07:00 DEBUG 37568 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_dvd(duration_minutes integer, price integer, product_value integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_dvd(duration_minutes integer, price integer, product_value integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T03:31:48.812+07:00 DEBUG 37568 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_book(page_count integer, price integer, product_value integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_book(page_count integer, price integer, product_value integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T03:31:48.814+07:00 DEBUG 37568 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_lp(price integer, product_value integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_lp(price integer, product_value integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T03:31:48.815+07:00 DEBUG 37568 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_cd(price integer, product_value integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_cd(price integer, product_value integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T03:31:48.963+07:00  INFO 37568 --- [demo] [  restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-28T03:31:49.002+07:00 DEBUG 37568 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
Hibernate: 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
2025-06-28T03:31:49.004+07:00  INFO 37568 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T03:31:49.279+07:00  INFO 37568 --- [demo] [  restartedMain] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-28T03:31:52.634+07:00  WARN 37568 --- [demo] [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-28T03:31:52.657+07:00  INFO 37568 --- [demo] [  restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2025-06-28T03:31:52.738+07:00 DEBUG 37568 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : 77 mappings in 'requestMappingHandlerMapping'
2025-06-28T03:31:52.817+07:00 DEBUG 37568 --- [demo] [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-28T03:31:52.846+07:00 DEBUG 37568 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-28T03:31:52.885+07:00 DEBUG 37568 --- [demo] [  restartedMain] .m.m.a.ExceptionHandlerExceptionResolver : ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-28T03:31:52.964+07:00  INFO 37568 --- [demo] [  restartedMain] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:sqlite:./data/ITSS_demo2.db'
2025-06-28T03:31:53.010+07:00  WARN 37568 --- [demo] [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : Unable to start LiveReload server
2025-06-28T03:31:53.032+07:00  WARN 37568 --- [demo] [  restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-06-28T03:31:53.034+07:00  INFO 37568 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T03:31:53.037+07:00  INFO 37568 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2025-06-28T03:31:53.038+07:00  INFO 37568 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2025-06-28T03:31:53.051+07:00  INFO 37568 --- [demo] [  restartedMain] .s.b.a.l.ConditionEvaluationReportLogger : 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-28T03:31:53.069+07:00 ERROR 37568 --- [demo] [  restartedMain] o.s.b.d.LoggingFailureAnalysisReporter   : 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] [1;32mBUILD SUCCESS[m
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] Total time:  10.470 s
[[1;34mINFO[m] Finished at: 2025-06-28T03:31:53+07:00
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[0m[0m                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  2025-06-28T03:31:40.883+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T03:31:40.883+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T03:31:40.884+07:00  INFO 18695 --- [demo] [nio-8080-exec-9] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T03:31:40.884+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T03:31:40.887+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T03:31:40.890+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-28T03:31:40.891+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-28T03:31:40.894+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:31:45.449+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T03:31:45.449+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T03:31:45.450+07:00  INFO 18695 --- [demo] [nio-8080-exec-5] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T03:31:45.451+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T03:31:45.453+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T03:31:45.460+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T03:31:45.460+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T03:31:45.461+07:00  INFO 18695 --- [demo] [io-8080-exec-10] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T03:31:45.462+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T03:31:45.463+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T03:31:45.463+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T03:31:45.464+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T03:31:45.463+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T03:31:45.464+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T03:31:45.464+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T03:31:45.465+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T03:31:45.465+07:00  INFO 18695 --- [demo] [nio-8080-exec-4] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T03:31:45.466+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T03:31:45.466+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T03:31:45.469+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T03:31:45.470+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:31:45.470+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:31:45.471+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T03:31:45.471+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:31:45.467+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:31:45.472+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T03:31:45.472+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:31:45.473+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:31:45.473+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:31:45.473+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:31:45.473+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:31:45.474+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-28T03:31:45.474+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:31:45.475+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:31:45.475+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:31:45.476+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:31:45.477+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:31:45.477+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:31:45.478+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:31:45.479+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:31:45.480+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:31:45.485+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:31:45.487+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:31:45.487+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:31:45.488+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:31:45.489+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:31:45.489+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:31:45.490+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:31:45.491+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:31:45.492+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:31:45.492+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:31:45.493+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:31:45.493+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:31:45.494+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:31:45.495+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:31:45.495+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:31:45.497+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:31:45.497+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:31:45.498+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:31:45.499+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:31:45.499+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:31:45.500+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:31:45.501+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:31:45.502+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:31:45.503+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:31:45.503+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:31:45.504+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:31:45.505+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:31:45.506+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:31:45.508+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T03:31:45.514+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:36:49.863+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T03:36:49.865+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T03:36:49.866+07:00  INFO 18695 --- [demo] [nio-8080-exec-6] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T03:36:49.867+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T03:36:49.870+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T03:36:49.870+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T03:36:49.871+07:00  INFO 18695 --- [demo] [nio-8080-exec-9] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T03:36:49.871+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T03:36:49.873+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T03:36:49.873+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T03:36:49.876+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:49.877+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:36:49.882+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-28T03:36:49.877+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:49.883+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:49.884+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:49.886+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:49.887+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:49.888+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:49.889+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:49.889+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:36:49.890+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:49.890+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:49.891+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:49.892+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:49.897+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T03:36:49.897+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T03:36:49.897+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T03:36:49.898+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T03:36:49.899+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T03:36:49.901+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:36:49.902+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T03:36:49.903+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:36:49.903+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T03:36:49.904+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:49.905+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T03:36:49.906+07:00  INFO 18695 --- [demo] [nio-8080-exec-4] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T03:36:49.906+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T03:36:49.907+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T03:36:49.910+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:36:49.910+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T03:36:49.912+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:36:49.918+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:49.922+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:36:49.924+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:49.925+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:49.926+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:36:49.927+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:49.931+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:49.933+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:49.934+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:49.935+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:49.954+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:49.980+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:49.983+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:49.985+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:49.987+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:49.993+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:49.993+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:49.994+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:49.995+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:49.996+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:49.997+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:50.002+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:36:50.004+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:50.004+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:50.005+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:50.011+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:50.012+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:36:50.014+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T03:36:50.032+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:36:52.885+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T03:36:52.885+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T03:36:52.886+07:00  INFO 18695 --- [demo] [nio-8080-exec-5] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T03:36:52.887+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T03:36:52.888+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T03:36:52.893+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:36:52.893+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-28T03:36:52.895+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:36:52.896+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T03:36:52.896+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T03:36:52.897+07:00  INFO 18695 --- [demo] [io-8080-exec-10] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T03:36:52.897+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T03:36:52.898+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T03:36:52.899+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:52.900+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:52.900+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:52.900+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:52.901+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:52.901+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:52.901+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:52.902+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:52.902+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:52.902+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:52.902+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:52.903+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:36:52.903+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:52.904+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:52.904+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:36:52.905+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:52.905+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:52.906+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:36:52.907+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:52.907+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:52.908+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:52.908+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:52.909+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:52.910+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:52.911+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:52.912+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:52.912+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:52.913+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:52.914+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:52.915+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:52.916+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:52.917+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:52.918+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T03:36:52.918+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T03:36:52.918+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:52.919+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:52.919+07:00  INFO 18695 --- [demo] [nio-8080-exec-8] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T03:36:52.919+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T03:36:52.921+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T03:36:52.921+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:36:52.922+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:52.922+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:52.923+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T03:36:52.924+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:52.924+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:52.925+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:36:52.927+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:36:52.928+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:36:52.930+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T03:36:52.936+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:36:52.953+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T03:36:52.954+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T03:36:52.955+07:00  INFO 18695 --- [demo] [nio-8080-exec-3] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T03:36:52.955+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T03:36:52.957+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T03:36:52.959+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:36:52.959+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T03:36:52.963+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:36:58.665+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T03:36:58.665+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T03:36:58.666+07:00  INFO 18695 --- [demo] [nio-8080-exec-2] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T03:36:58.666+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T03:36:58.667+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T03:36:58.670+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:36:58.670+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-28T03:36:58.671+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:37:00.016+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T03:37:00.016+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T03:37:00.017+07:00  INFO 18695 --- [demo] [nio-8080-exec-7] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T03:37:00.017+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T03:37:00.018+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T03:37:00.018+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T03:37:00.018+07:00  INFO 18695 --- [demo] [nio-8080-exec-6] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T03:37:00.018+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T03:37:00.019+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T03:37:00.019+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T03:37:00.020+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T03:37:00.021+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:37:00.021+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T03:37:00.021+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-28T03:37:00.021+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T03:37:00.021+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T03:37:00.021+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:00.022+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:37:00.022+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:00.022+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T03:37:00.023+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:00.023+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T03:37:00.024+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:37:00.025+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T03:37:00.025+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T03:37:00.026+07:00  INFO 18695 --- [demo] [nio-8080-exec-4] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T03:37:00.026+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T03:37:00.026+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:37:00.027+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T03:37:00.028+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:00.028+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:00.028+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:37:00.028+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T03:37:00.029+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:00.029+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:00.029+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:37:00.029+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:00.030+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:00.030+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:00.031+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:00.031+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:00.032+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:00.032+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:00.033+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:37:00.034+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:00.034+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:00.035+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:37:00.036+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:00.036+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:00.037+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:00.037+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:00.038+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:00.039+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:00.039+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:00.040+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:00.041+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:00.042+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:00.043+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:00.044+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:00.045+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:00.045+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:00.046+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:00.046+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:00.047+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:37:00.048+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:00.048+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:00.049+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:00.050+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:00.051+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:37:00.052+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T03:37:00.057+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:37:11.341+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T03:37:11.341+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T03:37:11.342+07:00  INFO 18695 --- [demo] [nio-8080-exec-9] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T03:37:11.342+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T03:37:11.344+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T03:37:11.346+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:37:11.347+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-28T03:37:11.350+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:37:15.890+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T03:37:15.891+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T03:37:15.891+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T03:37:15.891+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T03:37:15.891+07:00  INFO 18695 --- [demo] [nio-8080-exec-8] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T03:37:15.891+07:00  INFO 18695 --- [demo] [nio-8080-exec-5] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T03:37:15.892+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T03:37:15.892+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T03:37:15.892+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T03:37:15.893+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T03:37:15.893+07:00  INFO 18695 --- [demo] [io-8080-exec-10] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T03:37:15.893+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T03:37:15.894+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T03:37:15.894+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T03:37:15.894+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:15.895+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:15.895+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:15.895+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:37:15.896+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T03:37:15.893+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T03:37:15.897+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:15.896+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T03:37:15.897+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:15.897+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T03:37:15.898+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:15.898+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:15.898+07:00  INFO 18695 --- [demo] [nio-8080-exec-3] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T03:37:15.898+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T03:37:15.899+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:15.899+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T03:37:15.899+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:15.899+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:15.900+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:15.900+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:37:15.901+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:15.901+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:37:15.901+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T03:37:15.898+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:37:15.901+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:15.902+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:37:15.902+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:37:15.902+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:15.903+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:15.903+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:37:15.904+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:37:15.904+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-28T03:37:15.904+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:15.905+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:15.905+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:37:15.905+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:15.906+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:15.906+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:15.907+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:15.907+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:15.908+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:15.908+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:15.909+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:15.910+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:15.910+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:15.911+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:15.911+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:15.913+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:15.913+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:15.914+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:37:15.916+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:15.917+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:15.917+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:37:15.918+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:37:15.919+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:37:15.920+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T03:37:15.926+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:43:38.495+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T03:43:38.496+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T03:43:38.497+07:00  INFO 18695 --- [demo] [nio-8080-exec-6] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T03:43:38.497+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T03:43:38.499+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T03:43:38.503+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:43:38.503+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-28T03:43:38.504+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T03:43:38.504+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:43:38.504+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T03:43:38.505+07:00  INFO 18695 --- [demo] [nio-8080-exec-9] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T03:43:38.505+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T03:43:38.506+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T03:43:38.507+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:38.508+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:38.509+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:38.510+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:38.512+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T03:43:38.512+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T03:43:38.513+07:00  INFO 18695 --- [demo] [io-8080-exec-10] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T03:43:38.513+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T03:43:38.515+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:38.517+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T03:43:38.517+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T03:43:38.518+07:00  INFO 18695 --- [demo] [nio-8080-exec-3] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T03:43:38.519+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T03:43:38.519+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T03:43:38.517+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T03:43:38.523+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:38.523+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:38.524+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:43:38.524+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T03:43:38.526+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:43:38.527+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T03:43:38.527+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:43:38.528+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:43:38.524+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:38.529+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:38.534+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:38.534+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:38.535+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:38.536+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:38.537+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:38.538+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:43:38.539+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:38.540+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:38.541+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:43:38.543+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:38.543+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:38.545+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:38.546+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:38.547+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:38.548+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:38.549+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:38.550+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:38.551+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:38.552+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:38.553+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:38.554+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:38.555+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:38.555+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:38.555+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:38.555+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:38.556+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:43:38.556+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:38.557+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:38.557+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:38.557+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:38.558+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:43:38.559+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T03:43:38.569+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:43:51.698+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T03:43:51.699+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T03:43:51.699+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T03:43:51.699+07:00  INFO 18695 --- [demo] [nio-8080-exec-5] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T03:43:51.699+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T03:43:51.700+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T03:43:51.700+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T03:43:51.700+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T03:43:51.701+07:00  INFO 18695 --- [demo] [nio-8080-exec-2] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T03:43:51.701+07:00  INFO 18695 --- [demo] [nio-8080-exec-8] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T03:43:51.701+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T03:43:51.701+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T03:43:51.702+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T03:43:51.703+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T03:43:51.703+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:43:51.703+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-28T03:43:51.704+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:43:51.704+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T03:43:51.705+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:43:51.706+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T03:43:51.705+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:43:51.706+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:51.707+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:51.707+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:51.707+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:51.708+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:51.708+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:51.708+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:51.709+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:51.709+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:51.709+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:51.709+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:51.710+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:43:51.710+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:51.710+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:51.711+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:43:51.711+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:51.712+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:51.712+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:43:51.713+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:51.713+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:51.714+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:51.715+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:51.715+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:51.716+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:51.716+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:51.717+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:51.718+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:51.718+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:51.719+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:51.720+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:51.720+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:51.721+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:51.722+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:51.723+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:51.724+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:43:51.724+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T03:43:51.724+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T03:43:51.725+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:51.725+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:51.725+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T03:43:51.726+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T03:43:51.726+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:43:51.726+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T03:43:51.726+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:43:51.727+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:43:51.727+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:43:51.727+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T03:43:51.728+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:43:51.729+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T03:43:51.735+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:45:18.079+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : OPTIONS "/api/products", parameters={}
2025-06-28T03:45:18.080+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#createProduct(ProductDTO)
2025-06-28T03:45:18.082+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:45:18.089+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : POST "/api/products", parameters={}
2025-06-28T03:45:18.089+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#createProduct(ProductDTO)
2025-06-28T03:45:18.134+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] m.m.a.RequestResponseBodyMethodProcessor : Read "application/json;charset=UTF-8" to [ProductDTO(productId=null, title=1, price=100000, productValue=null, dimensions=null, condition=null (truncated)...]
2025-06-28T03:45:18.176+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] .m.m.a.ExceptionHandlerExceptionResolver : Using @ExceptionHandler com.itss.ecommerce.exception.GlobalExceptionHandler#handleValidationException(MethodArgumentNotValidException)
2025-06-28T03:45:18.176+07:00  WARN 18695 --- [demo] [nio-8080-exec-3] c.i.e.exception.GlobalExceptionHandler   : Validation error: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.itss.ecommerce.dto.ApiResponse<com.itss.ecommerce.dto.ProductDTO>> com.itss.ecommerce.controller.ProductController.createProduct(com.itss.ecommerce.dto.ProductDTO): [Field error in object 'productDTO' on field 'productValue': rejected value [null]; codes [NotNull.productDTO.productValue,NotNull.productValue,NotNull.java.lang.Integer,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [productDTO.productValue,productValue]; arguments []; default message [productValue]]; default message [Product value is required]] 
2025-06-28T03:45:18.177+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:45:18.177+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=false, message=Validation failed, data={productValue=Product value is required}, (truncated)...]
2025-06-28T03:45:18.179+07:00  WARN 18695 --- [demo] [nio-8080-exec-3] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.itss.ecommerce.dto.ApiResponse<com.itss.ecommerce.dto.ProductDTO>> com.itss.ecommerce.controller.ProductController.createProduct(com.itss.ecommerce.dto.ProductDTO): [Field error in object 'productDTO' on field 'productValue': rejected value [null]; codes [NotNull.productDTO.productValue,NotNull.productValue,NotNull.java.lang.Integer,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [productDTO.productValue,productValue]; arguments []; default message [productValue]]; default message [Product value is required]] ]
2025-06-28T03:45:18.179+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed 400 BAD_REQUEST
2025-06-28T03:51:46.488+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T03:51:46.488+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T03:51:46.489+07:00  INFO 18695 --- [demo] [nio-8080-exec-9] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T03:51:46.489+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T03:51:46.491+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T03:51:46.504+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T03:51:46.505+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T03:51:46.505+07:00  INFO 18695 --- [demo] [nio-8080-exec-2] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T03:51:46.506+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T03:51:46.507+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T03:51:46.508+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T03:51:46.508+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T03:51:46.509+07:00  INFO 18695 --- [demo] [nio-8080-exec-5] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T03:51:46.509+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T03:51:46.511+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T03:51:46.515+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:51:46.516+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T03:51:46.516+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T03:51:46.516+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T03:51:46.517+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:51:46.517+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T03:51:46.517+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T03:51:46.518+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T03:51:46.520+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:51:46.520+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-28T03:51:46.521+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:51:46.523+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:51:46.524+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:51:46.525+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T03:51:46.527+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:51:46.526+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:51:46.530+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:51:46.531+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:51:46.531+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:51:46.532+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:51:46.533+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:51:46.534+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:51:46.535+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:51:46.536+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:51:46.537+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:51:46.539+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:51:46.540+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:51:46.541+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:51:46.542+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:51:46.544+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:51:46.545+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:51:46.546+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:51:46.547+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:51:46.548+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:51:46.549+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:51:46.549+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:51:46.550+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:51:46.551+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:51:46.554+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:51:46.555+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:51:46.557+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:51:46.558+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:51:46.559+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:51:46.559+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:51:46.560+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:51:46.561+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:51:46.561+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:51:46.562+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:51:46.563+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:51:46.564+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:51:46.565+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:51:46.567+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:51:46.568+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:51:46.570+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:51:46.573+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T03:51:46.587+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:52:37.481+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T03:52:37.481+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T03:52:37.481+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T03:52:37.481+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T03:52:37.482+07:00  INFO 18695 --- [demo] [nio-8080-exec-6] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T03:52:37.482+07:00  INFO 18695 --- [demo] [nio-8080-exec-8] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T03:52:37.482+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T03:52:37.482+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T03:52:37.483+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T03:52:37.484+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T03:52:37.484+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:52:37.484+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:52:37.485+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:52:37.485+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:52:37.485+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:52:37.486+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:52:37.486+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:52:37.486+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-28T03:52:37.486+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:52:37.487+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:52:37.487+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:52:37.488+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:52:37.488+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:52:37.488+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:52:37.489+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:52:37.490+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:52:37.490+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:52:37.490+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:52:37.491+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:52:37.491+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:52:37.492+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:52:37.493+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:52:37.494+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:52:37.494+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:52:37.495+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:52:37.497+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:52:37.498+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:52:37.498+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:52:37.498+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:52:37.499+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:52:37.499+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:52:37.499+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:52:37.500+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:52:37.500+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:52:37.501+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:52:37.502+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:52:37.503+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:52:37.503+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:52:37.506+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T03:52:37.507+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T03:52:37.507+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:52:37.507+07:00  INFO 18695 --- [demo] [nio-8080-exec-7] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T03:52:37.507+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:52:37.507+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] com.itss.ecommerce.service.UserService   : Fetching all users
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:52:37.508+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T03:52:37.509+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:52:37.510+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:52:37.510+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:52:37.510+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T03:52:37.511+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:52:37.511+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:52:37.509+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T03:52:37.511+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T03:52:37.512+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T03:52:37.512+07:00  INFO 18695 --- [demo] [nio-8080-exec-4] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T03:52:37.513+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T03:52:37.513+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T03:52:37.515+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:52:37.516+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T03:52:37.516+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:52:37.517+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:56:40.056+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : POST "/api/products", parameters={}
2025-06-28T03:56:40.057+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#createProduct(ProductDTO)
2025-06-28T03:56:40.062+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] m.m.a.RequestResponseBodyMethodProcessor : Read "application/json;charset=UTF-8" to [ProductDTO(productId=null, title=1, price=100000, productValue=123, dimensions=null, condition=null, (truncated)...]
2025-06-28T03:56:40.073+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.i.e.controller.ProductController       : POST /api/products - Creating new product: 1
2025-06-28T03:56:40.075+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.itss.ecommerce.service.ProductService  : Saving product: 1
2025-06-28T03:56:40.088+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.barcode=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.barcode=?
2025-06-28T03:56:40.162+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    insert 
    into
        product
        (barcode, condition, created_at, dimensions, image_url, import_date, introduction, price, product_value, quantity, rush_order_supported, title, updated_at, weight, type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'book')
Hibernate: 
    insert 
    into
        product
        (barcode, condition, created_at, dimensions, image_url, import_date, introduction, price, product_value, quantity, rush_order_supported, title, updated_at, weight, type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'book')
2025-06-28T03:56:40.169+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T03:56:40.188+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    insert 
    into
        book
        (authors, cover_type, genre, page_count, publication_date, publishers, product_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        book
        (authors, cover_type, genre, page_count, publication_date, publishers, product_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-28T03:56:40.191+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] c.i.ecommerce.service.AuditLogService    : Logging CREATE operation on Product with ID: 10 by user: null
2025-06-28T03:56:40.194+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    insert 
    into
        audit_log
        (action_name, action_type, entity_id, entity_type, note, recorded_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        audit_log
        (action_name, action_type, entity_id, entity_type, note, recorded_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-28T03:56:40.195+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T03:56:40.195+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.itss.ecommerce.service.ProductService  : Product saved successfully with ID: 10
2025-06-28T03:56:40.205+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:56:40.205+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Product created successfully, data=ProductDTO(productId=10, title= (truncated)...]
2025-06-28T03:56:40.206+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 201 CREATED
2025-06-28T03:56:40.459+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T03:56:40.459+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T03:56:40.460+07:00  INFO 18695 --- [demo] [nio-8080-exec-5] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T03:56:40.460+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T03:56:40.461+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T03:56:40.462+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T03:56:40.462+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T03:56:40.463+07:00  INFO 18695 --- [demo] [nio-8080-exec-8] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T03:56:40.463+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T03:56:40.464+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:56:40.464+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T03:56:40.464+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T03:56:40.466+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:56:40.466+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:56:40.466+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:56:40.467+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:56:40.469+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:56:40.470+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:56:40.471+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:56:40.472+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:56:40.473+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:56:40.473+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:56:40.474+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:56:40.475+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T03:56:40.475+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:56:40.476+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T03:56:40.476+07:00  INFO 18695 --- [demo] [nio-8080-exec-7] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T03:56:40.477+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T03:56:40.477+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T03:56:40.478+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T03:56:40.478+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:56:40.479+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:56:40.479+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T03:56:40.480+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:56:40.480+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:56:40.481+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:56:40.482+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:56:40.483+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:56:40.484+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:56:40.485+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T03:56:40.486+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T03:56:40.487+07:00  INFO 18695 --- [demo] [nio-8080-exec-4] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T03:56:40.487+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T03:56:40.488+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T03:56:40.485+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:56:40.490+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:56:40.490+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T03:56:40.491+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:56:40.492+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:56:40.493+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:56:40.494+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:56:40.495+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:56:40.495+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:56:40.496+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:56:40.496+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:56:40.502+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:56:40.503+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:56:40.506+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:56:40.507+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:56:40.508+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:56:40.509+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:56:40.509+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:56:40.509+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:56:40.510+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.product_value,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T03:56:40.510+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:56:40.511+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:56:40.511+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T03:56:40.512+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T03:56:40.512+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T03:56:40.513+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T03:56:40.516+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T03:59:21.464+07:00  INFO 18695 --- [demo] [   File Watcher] rtingClassPathChangeChangedEventListener : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-06-28T03:59:21.466+07:00  INFO 18695 --- [demo] [       Thread-7] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete
2025-06-28T03:59:21.470+07:00  INFO 18695 --- [demo] [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown complete
2025-06-28T03:59:21.474+07:00  INFO 18695 --- [demo] [       Thread-7] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T03:59:21.475+07:00  INFO 18695 --- [demo] [       Thread-7] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown initiated...
2025-06-28T03:59:21.476+07:00  INFO 18695 --- [demo] [       Thread-7] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown completed.

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.4)

2025-06-28T03:59:21.649+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Starting EcommerceApplication using Java 21.0.6 with PID 18695 (/home/bxs/AIMSspringboot-react/target/classes started by bxs in /home/bxs/AIMSspringboot-react)
2025-06-28T03:59:21.649+07:00 DEBUG 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Running with Spring Boot v3.4.4, Spring v6.2.5
2025-06-28T03:59:21.649+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : No active profile set, falling back to 1 default profile: "default"
2025-06-28T03:59:21.840+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-28T03:59:21.840+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-28T03:59:21.860+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 19 ms. Found 12 JPA repository interfaces.
2025-06-28T03:59:22.070+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-28T03:59:22.072+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-28T03:59:22.072+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-06-28T03:59:22.170+07:00  INFO 18695 --- [demo] [  restartedMain] org.apache.jasper.servlet.TldScanner     : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2025-06-28T03:59:22.172+07:00  INFO 18695 --- [demo] [  restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-06-28T03:59:22.172+07:00  INFO 18695 --- [demo] [  restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 521 ms
2025-06-28T03:59:22.210+07:00  INFO 18695 --- [demo] [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-28T03:59:22.213+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-28T03:59:22.227+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-28T03:59:22.228+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Starting...
2025-06-28T03:59:22.229+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-3 - Added connection org.sqlite.jdbc4.JDBC4Connection@6d0ab748
2025-06-28T03:59:22.229+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Start completed.
2025-06-28T03:59:22.230+07:00  INFO 18695 --- [demo] [  restartedMain] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-3)']
	Database driver: undefined/unknown
	Database version: 3.47.2
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-28T03:59:22.583+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
Hibernate: 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
2025-06-28T03:59:22.585+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, product_value integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, product_value integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T03:59:22.586+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_dvd(duration_minutes integer, price integer, product_value integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_dvd(duration_minutes integer, price integer, product_value integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T03:59:22.587+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_book(page_count integer, price integer, product_value integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_book(page_count integer, price integer, product_value integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T03:59:22.587+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_lp(price integer, product_value integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_lp(price integer, product_value integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T03:59:22.588+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_cd(price integer, product_value integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_cd(price integer, product_value integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T03:59:22.606+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-28T03:59:22.615+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
Hibernate: 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
2025-06-28T03:59:22.616+07:00  INFO 18695 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T03:59:23.058+07:00  WARN 18695 --- [demo] [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-28T03:59:23.065+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2025-06-28T03:59:23.104+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : 77 mappings in 'requestMappingHandlerMapping'
2025-06-28T03:59:23.168+07:00 DEBUG 18695 --- [demo] [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-28T03:59:23.184+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-28T03:59:23.199+07:00 DEBUG 18695 --- [demo] [  restartedMain] .m.m.a.ExceptionHandlerExceptionResolver : ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-28T03:59:23.237+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:sqlite:./data/ITSS_demo2.db'
2025-06-28T03:59:23.261+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2025-06-28T03:59:23.274+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-06-28T03:59:23.278+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Started EcommerceApplication in 1.662 seconds (process running for 4240.483)
2025-06-28T03:59:23.280+07:00  INFO 18695 --- [demo] [  restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2025-06-28T03:59:41.785+07:00  INFO 18695 --- [demo] [   File Watcher] rtingClassPathChangeChangedEventListener : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-06-28T03:59:41.792+07:00  INFO 18695 --- [demo] [      Thread-12] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete
2025-06-28T03:59:41.802+07:00  INFO 18695 --- [demo] [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown complete
2025-06-28T03:59:41.806+07:00  INFO 18695 --- [demo] [      Thread-12] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T03:59:41.810+07:00  INFO 18695 --- [demo] [      Thread-12] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Shutdown initiated...
2025-06-28T03:59:41.828+07:00  INFO 18695 --- [demo] [      Thread-12] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Shutdown completed.

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.4)

2025-06-28T03:59:42.012+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Starting EcommerceApplication using Java 21.0.6 with PID 18695 (/home/bxs/AIMSspringboot-react/target/classes started by bxs in /home/bxs/AIMSspringboot-react)
2025-06-28T03:59:42.012+07:00 DEBUG 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Running with Spring Boot v3.4.4, Spring v6.2.5
2025-06-28T03:59:42.013+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : No active profile set, falling back to 1 default profile: "default"
2025-06-28T03:59:42.147+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-28T03:59:42.148+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-28T03:59:42.165+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 16 ms. Found 12 JPA repository interfaces.
2025-06-28T03:59:42.316+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-28T03:59:42.317+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-28T03:59:42.317+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-06-28T03:59:42.377+07:00  INFO 18695 --- [demo] [  restartedMain] org.apache.jasper.servlet.TldScanner     : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2025-06-28T03:59:42.378+07:00  INFO 18695 --- [demo] [  restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-06-28T03:59:42.378+07:00  INFO 18695 --- [demo] [  restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 364 ms
2025-06-28T03:59:42.418+07:00  INFO 18695 --- [demo] [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-28T03:59:42.420+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-28T03:59:42.430+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-28T03:59:42.432+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-4 - Starting...
2025-06-28T03:59:42.432+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-4 - Added connection org.sqlite.jdbc4.JDBC4Connection@5630bf8a
2025-06-28T03:59:42.432+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-4 - Start completed.
2025-06-28T03:59:42.433+07:00  INFO 18695 --- [demo] [  restartedMain] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-4)']
	Database driver: undefined/unknown
	Database version: 3.47.2
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-28T03:59:42.704+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
Hibernate: 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
2025-06-28T03:59:42.706+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T03:59:42.707+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T03:59:42.708+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T03:59:42.709+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T03:59:42.710+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T03:59:42.724+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-28T03:59:42.734+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
Hibernate: 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
2025-06-28T03:59:42.734+07:00  INFO 18695 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T03:59:43.120+07:00  WARN 18695 --- [demo] [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-28T03:59:43.126+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2025-06-28T03:59:43.149+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : 77 mappings in 'requestMappingHandlerMapping'
2025-06-28T03:59:43.172+07:00 DEBUG 18695 --- [demo] [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-28T03:59:43.178+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-28T03:59:43.185+07:00 DEBUG 18695 --- [demo] [  restartedMain] .m.m.a.ExceptionHandlerExceptionResolver : ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-28T03:59:43.200+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:sqlite:./data/ITSS_demo2.db'
2025-06-28T03:59:43.208+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2025-06-28T03:59:43.217+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-06-28T03:59:43.220+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Started EcommerceApplication in 1.237 seconds (process running for 4260.425)
2025-06-28T03:59:43.220+07:00  INFO 18695 --- [demo] [  restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2025-06-28T04:00:14.806+07:00  INFO 18695 --- [demo] [   File Watcher] rtingClassPathChangeChangedEventListener : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-06-28T04:00:14.808+07:00  INFO 18695 --- [demo] [      Thread-16] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete
2025-06-28T04:00:14.809+07:00  INFO 18695 --- [demo] [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown complete
2025-06-28T04:00:14.811+07:00  INFO 18695 --- [demo] [      Thread-16] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:00:14.812+07:00  INFO 18695 --- [demo] [      Thread-16] com.zaxxer.hikari.HikariDataSource       : HikariPool-4 - Shutdown initiated...
2025-06-28T04:00:14.812+07:00  INFO 18695 --- [demo] [      Thread-16] com.zaxxer.hikari.HikariDataSource       : HikariPool-4 - Shutdown completed.

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.4)

2025-06-28T04:00:14.944+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Starting EcommerceApplication using Java 21.0.6 with PID 18695 (/home/bxs/AIMSspringboot-react/target/classes started by bxs in /home/bxs/AIMSspringboot-react)
2025-06-28T04:00:14.944+07:00 DEBUG 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Running with Spring Boot v3.4.4, Spring v6.2.5
2025-06-28T04:00:14.944+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : No active profile set, falling back to 1 default profile: "default"
2025-06-28T04:00:15.075+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-28T04:00:15.075+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-28T04:00:15.100+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 24 ms. Found 12 JPA repository interfaces.
2025-06-28T04:00:15.251+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-28T04:00:15.252+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-28T04:00:15.252+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-06-28T04:00:15.315+07:00  INFO 18695 --- [demo] [  restartedMain] org.apache.jasper.servlet.TldScanner     : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2025-06-28T04:00:15.317+07:00  INFO 18695 --- [demo] [  restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-06-28T04:00:15.317+07:00  INFO 18695 --- [demo] [  restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 372 ms
2025-06-28T04:00:15.349+07:00  INFO 18695 --- [demo] [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-28T04:00:15.351+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-28T04:00:15.361+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-28T04:00:15.362+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-5 - Starting...
2025-06-28T04:00:15.363+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-5 - Added connection org.sqlite.jdbc4.JDBC4Connection@59996fdb
2025-06-28T04:00:15.363+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-5 - Start completed.
2025-06-28T04:00:15.364+07:00  INFO 18695 --- [demo] [  restartedMain] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-5)']
	Database driver: undefined/unknown
	Database version: 3.47.2
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-28T04:00:15.629+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
Hibernate: 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
2025-06-28T04:00:15.631+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:00:15.631+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:00:15.632+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:00:15.632+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:00:15.633+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:00:15.643+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-28T04:00:15.649+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
Hibernate: 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
2025-06-28T04:00:15.650+07:00  INFO 18695 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:00:16.045+07:00  WARN 18695 --- [demo] [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-28T04:00:16.051+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2025-06-28T04:00:16.078+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : 77 mappings in 'requestMappingHandlerMapping'
2025-06-28T04:00:16.111+07:00 DEBUG 18695 --- [demo] [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-28T04:00:16.118+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-28T04:00:16.130+07:00 DEBUG 18695 --- [demo] [  restartedMain] .m.m.a.ExceptionHandlerExceptionResolver : ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-28T04:00:16.150+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:sqlite:./data/ITSS_demo2.db'
2025-06-28T04:00:16.162+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2025-06-28T04:00:16.172+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-06-28T04:00:16.176+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Started EcommerceApplication in 1.263 seconds (process running for 4293.381)
2025-06-28T04:00:16.178+07:00  INFO 18695 --- [demo] [  restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2025-06-28T04:00:42.775+07:00  INFO 18695 --- [demo] [   File Watcher] rtingClassPathChangeChangedEventListener : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-06-28T04:00:42.782+07:00  INFO 18695 --- [demo] [      Thread-20] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete
2025-06-28T04:00:42.787+07:00  INFO 18695 --- [demo] [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown complete
2025-06-28T04:00:42.803+07:00  INFO 18695 --- [demo] [      Thread-20] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:00:42.805+07:00  INFO 18695 --- [demo] [      Thread-20] com.zaxxer.hikari.HikariDataSource       : HikariPool-5 - Shutdown initiated...
2025-06-28T04:00:42.811+07:00  INFO 18695 --- [demo] [      Thread-20] com.zaxxer.hikari.HikariDataSource       : HikariPool-5 - Shutdown completed.

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.4)

2025-06-28T04:00:43.023+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Starting EcommerceApplication using Java 21.0.6 with PID 18695 (/home/bxs/AIMSspringboot-react/target/classes started by bxs in /home/bxs/AIMSspringboot-react)
2025-06-28T04:00:43.024+07:00 DEBUG 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Running with Spring Boot v3.4.4, Spring v6.2.5
2025-06-28T04:00:43.024+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : No active profile set, falling back to 1 default profile: "default"
2025-06-28T04:00:43.141+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-28T04:00:43.141+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-28T04:00:43.169+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 27 ms. Found 12 JPA repository interfaces.
2025-06-28T04:00:43.328+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-28T04:00:43.328+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-28T04:00:43.329+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-06-28T04:00:43.411+07:00  INFO 18695 --- [demo] [  restartedMain] org.apache.jasper.servlet.TldScanner     : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2025-06-28T04:00:43.413+07:00  INFO 18695 --- [demo] [  restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-06-28T04:00:43.413+07:00  INFO 18695 --- [demo] [  restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 386 ms
2025-06-28T04:00:43.459+07:00  INFO 18695 --- [demo] [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-28T04:00:43.461+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-28T04:00:43.472+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-28T04:00:43.473+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-6 - Starting...
2025-06-28T04:00:43.474+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-6 - Added connection org.sqlite.jdbc4.JDBC4Connection@6aa7001
2025-06-28T04:00:43.474+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-6 - Start completed.
2025-06-28T04:00:43.475+07:00  INFO 18695 --- [demo] [  restartedMain] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-6)']
	Database driver: undefined/unknown
	Database version: 3.47.2
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-28T04:00:43.751+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
Hibernate: 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
2025-06-28T04:00:43.753+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:00:43.754+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:00:43.755+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:00:43.756+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:00:43.756+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:00:43.769+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-28T04:00:43.775+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
Hibernate: 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
2025-06-28T04:00:43.776+07:00  INFO 18695 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:00:44.149+07:00  WARN 18695 --- [demo] [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-28T04:00:44.154+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2025-06-28T04:00:44.181+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : 77 mappings in 'requestMappingHandlerMapping'
2025-06-28T04:00:44.209+07:00 DEBUG 18695 --- [demo] [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-28T04:00:44.216+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-28T04:00:44.222+07:00 DEBUG 18695 --- [demo] [  restartedMain] .m.m.a.ExceptionHandlerExceptionResolver : ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-28T04:00:44.230+07:00  WARN 18695 --- [demo] [  restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #2 of file [/home/bxs/AIMSspringboot-react/target/classes/data.sql]: INSERT OR IGNORE INTO product ( type, title, price, weight, rush_order_supported, dimensions, condition, image_url, barcode, import_date, introduction, quantity, created_at, updated_at ) VALUES ( 'book', 'The Great Gatsby', 120000, 100000, 0.3, 0, '20x13x2 cm', 'New', 'https://covers.openlibrary.org/b/id/8225261-L.jpg', '978-0-7432-7356-5', '2024-01-15', 'A classic American novel about the Jazz Age and the American Dream.', 25, datetime ('now'), datetime ('now') ), ( 'book', 'To Kill a Mockingbird', 135000, 100000, 0.35, 0, '21x14x2.5 cm', 'New', 'https://covers.openlibrary.org/b/id/8226816-L.jpg', '978-0-06-112008-4', '2024-01-10', 'A gripping tale of racial injustice and childhood innocence in the American South.', 30, datetime ('now'), datetime ('now') ), ( 'book', '1984', 145000, 100000, 0.28, 1, '20x13x2 cm', 'New', 'https://covers.openlibrary.org/b/id/8226112-L.jpg', '978-0-452-28423-4', '2024-01-12', 'A dystopian social science fiction novel about totalitarianism.', 40, datetime ('now'), datetime ('now') ), ( 'cd', 'Abbey Road', 350000, 300000, 0.1, 0, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/4/42/Beatles_-_Abbey_Road.jpg', '094638241621', '2024-01-20', 'The Beatles final studio album featuring Come Together.', 15, datetime ('now'), datetime ('now') ), ( 'cd', 'Dark Side of the Moon', 380000, 300000, 0.1, 1, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/3/3b/Dark_Side_of_the_Moon.png', '094637420621', '2024-01-18', 'Pink Floyd masterpiece exploring conflict and madness.', 20, datetime ('now'), datetime ('now') ), ( 'cd', 'Thriller', 340000, 300000, 0.1, 0, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/5/55/Michael_Jackson_-_Thriller.png', '074643851428', '2024-01-22', 'Michael Jackson''s Thriller with Billie Jean and Beat It.', 18, datetime ('now'), datetime ('now') ), ( 'dvd', 'The Shawshank Redemption', 220000, 180000, 0.15, 0, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/519NBNHX5BL._AC_.jpg', '085391163926', '2024-01-25', 'A story of friendship and redemption in prison.', 12, datetime ('now'), datetime ('now') ), ( 'dvd', 'The Godfather', 250000, 180000, 0.15, 1, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/41+dkHBquGL._AC_.jpg', '097360719147', '2024-01-23', 'The aging patriarch hands control to his son.', 10, datetime ('now'), datetime ('now') ), ( 'dvd', 'Pulp Fiction', 210000, 180000, 0.15, 0, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/71c05lTE03L._AC_SL1024_.jpg', '031398187737', '2024-01-24', 'Tarantino''s cult classic about L.A. criminals.', 14, datetime ('now'), datetime ('now') )
2025-06-28T04:00:44.231+07:00  INFO 18695 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:00:44.231+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-6 - Shutdown initiated...
2025-06-28T04:00:44.232+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-6 - Shutdown completed.
2025-06-28T04:00:44.232+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2025-06-28T04:00:44.248+07:00  INFO 18695 --- [demo] [  restartedMain] .s.b.a.l.ConditionEvaluationReportLogger : 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-28T04:00:44.306+07:00 ERROR 18695 --- [demo] [  restartedMain] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #2 of file [/home/bxs/AIMSspringboot-react/target/classes/data.sql]: INSERT OR IGNORE INTO product ( type, title, price, weight, rush_order_supported, dimensions, condition, image_url, barcode, import_date, introduction, quantity, created_at, updated_at ) VALUES ( 'book', 'The Great Gatsby', 120000, 100000, 0.3, 0, '20x13x2 cm', 'New', 'https://covers.openlibrary.org/b/id/8225261-L.jpg', '978-0-7432-7356-5', '2024-01-15', 'A classic American novel about the Jazz Age and the American Dream.', 25, datetime ('now'), datetime ('now') ), ( 'book', 'To Kill a Mockingbird', 135000, 100000, 0.35, 0, '21x14x2.5 cm', 'New', 'https://covers.openlibrary.org/b/id/8226816-L.jpg', '978-0-06-112008-4', '2024-01-10', 'A gripping tale of racial injustice and childhood innocence in the American South.', 30, datetime ('now'), datetime ('now') ), ( 'book', '1984', 145000, 100000, 0.28, 1, '20x13x2 cm', 'New', 'https://covers.openlibrary.org/b/id/8226112-L.jpg', '978-0-452-28423-4', '2024-01-12', 'A dystopian social science fiction novel about totalitarianism.', 40, datetime ('now'), datetime ('now') ), ( 'cd', 'Abbey Road', 350000, 300000, 0.1, 0, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/4/42/Beatles_-_Abbey_Road.jpg', '094638241621', '2024-01-20', 'The Beatles final studio album featuring Come Together.', 15, datetime ('now'), datetime ('now') ), ( 'cd', 'Dark Side of the Moon', 380000, 300000, 0.1, 1, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/3/3b/Dark_Side_of_the_Moon.png', '094637420621', '2024-01-18', 'Pink Floyd masterpiece exploring conflict and madness.', 20, datetime ('now'), datetime ('now') ), ( 'cd', 'Thriller', 340000, 300000, 0.1, 0, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/5/55/Michael_Jackson_-_Thriller.png', '074643851428', '2024-01-22', 'Michael Jackson''s Thriller with Billie Jean and Beat It.', 18, datetime ('now'), datetime ('now') ), ( 'dvd', 'The Shawshank Redemption', 220000, 180000, 0.15, 0, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/519NBNHX5BL._AC_.jpg', '085391163926', '2024-01-25', 'A story of friendship and redemption in prison.', 12, datetime ('now'), datetime ('now') ), ( 'dvd', 'The Godfather', 250000, 180000, 0.15, 1, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/41+dkHBquGL._AC_.jpg', '097360719147', '2024-01-23', 'The aging patriarch hands control to his son.', 10, datetime ('now'), datetime ('now') ), ( 'dvd', 'Pulp Fiction', 210000, 180000, 0.15, 0, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/71c05lTE03L._AC_SL1024_.jpg', '031398187737', '2024-01-24', 'Tarantino''s cult classic about L.A. criminals.', 14, datetime ('now'), datetime ('now') )
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1812) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:347) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.instantiateSingleton(DefaultListableBeanFactory.java:1155) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingleton(DefaultListableBeanFactory.java:1121) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:1056) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:987) ~[spring-context-6.2.5.jar:6.2.5]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627) ~[spring-context-6.2.5.jar:6.2.5]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1361) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1350) ~[spring-boot-3.4.4.jar:3.4.4]
	at com.itss.ecommerce.EcommerceApplication.main(EcommerceApplication.java:11) ~[classes/:na]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50) ~[spring-boot-devtools-3.4.4.jar:3.4.4]
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #2 of file [/home/bxs/AIMSspringboot-react/target/classes/data.sql]: INSERT OR IGNORE INTO product ( type, title, price, weight, rush_order_supported, dimensions, condition, image_url, barcode, import_date, introduction, quantity, created_at, updated_at ) VALUES ( 'book', 'The Great Gatsby', 120000, 100000, 0.3, 0, '20x13x2 cm', 'New', 'https://covers.openlibrary.org/b/id/8225261-L.jpg', '978-0-7432-7356-5', '2024-01-15', 'A classic American novel about the Jazz Age and the American Dream.', 25, datetime ('now'), datetime ('now') ), ( 'book', 'To Kill a Mockingbird', 135000, 100000, 0.35, 0, '21x14x2.5 cm', 'New', 'https://covers.openlibrary.org/b/id/8226816-L.jpg', '978-0-06-112008-4', '2024-01-10', 'A gripping tale of racial injustice and childhood innocence in the American South.', 30, datetime ('now'), datetime ('now') ), ( 'book', '1984', 145000, 100000, 0.28, 1, '20x13x2 cm', 'New', 'https://covers.openlibrary.org/b/id/8226112-L.jpg', '978-0-452-28423-4', '2024-01-12', 'A dystopian social science fiction novel about totalitarianism.', 40, datetime ('now'), datetime ('now') ), ( 'cd', 'Abbey Road', 350000, 300000, 0.1, 0, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/4/42/Beatles_-_Abbey_Road.jpg', '094638241621', '2024-01-20', 'The Beatles final studio album featuring Come Together.', 15, datetime ('now'), datetime ('now') ), ( 'cd', 'Dark Side of the Moon', 380000, 300000, 0.1, 1, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/3/3b/Dark_Side_of_the_Moon.png', '094637420621', '2024-01-18', 'Pink Floyd masterpiece exploring conflict and madness.', 20, datetime ('now'), datetime ('now') ), ( 'cd', 'Thriller', 340000, 300000, 0.1, 0, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/5/55/Michael_Jackson_-_Thriller.png', '074643851428', '2024-01-22', 'Michael Jackson''s Thriller with Billie Jean and Beat It.', 18, datetime ('now'), datetime ('now') ), ( 'dvd', 'The Shawshank Redemption', 220000, 180000, 0.15, 0, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/519NBNHX5BL._AC_.jpg', '085391163926', '2024-01-25', 'A story of friendship and redemption in prison.', 12, datetime ('now'), datetime ('now') ), ( 'dvd', 'The Godfather', 250000, 180000, 0.15, 1, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/41+dkHBquGL._AC_.jpg', '097360719147', '2024-01-23', 'The aging patriarch hands control to his son.', 10, datetime ('now'), datetime ('now') ), ( 'dvd', 'Pulp Fiction', 210000, 180000, 0.15, 0, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/71c05lTE03L._AC_SL1024_.jpg', '031398187737', '2024-01-24', 'Tarantino''s cult classic about L.A. criminals.', 14, datetime ('now'), datetime ('now') )
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282) ~[spring-jdbc-6.2.5.jar:6.2.5]
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254) ~[spring-jdbc-6.2.5.jar:6.2.5]
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54) ~[spring-jdbc-6.2.5.jar:6.2.5]
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1859) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1808) ~[spring-beans-6.2.5.jar:6.2.5]
	... 23 common frames omitted
Caused by: org.sqlite.SQLiteException: [SQLITE_ERROR] SQL error or missing database (15 values for 14 columns)
	at org.sqlite.core.DB.newSQLException(DB.java:1179) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.core.DB.newSQLException(DB.java:1190) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.core.DB.throwex(DB.java:1150) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.core.NativeDB.prepare_utf8(Native Method) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.core.NativeDB.prepare(NativeDB.java:135) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.core.DB.prepare(DB.java:264) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.jdbc3.JDBC3Statement.lambda$execute$0(JDBC3Statement.java:55) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.jdbc3.JDBC3Statement.withConnectionTimeout(JDBC3Statement.java:458) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.jdbc3.JDBC3Statement.execute(JDBC3Statement.java:44) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.1.0.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.1.0.jar:na]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261) ~[spring-jdbc-6.2.5.jar:6.2.5]
	... 33 common frames omitted


  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.4)

2025-06-28T04:01:02.915+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Starting EcommerceApplication using Java 21.0.6 with PID 18695 (/home/bxs/AIMSspringboot-react/target/classes started by bxs in /home/bxs/AIMSspringboot-react)
2025-06-28T04:01:02.915+07:00 DEBUG 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Running with Spring Boot v3.4.4, Spring v6.2.5
2025-06-28T04:01:02.915+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : No active profile set, falling back to 1 default profile: "default"
2025-06-28T04:01:03.034+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-28T04:01:03.034+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-28T04:01:03.061+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 26 ms. Found 12 JPA repository interfaces.
2025-06-28T04:01:03.222+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-28T04:01:03.225+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-28T04:01:03.226+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-06-28T04:01:03.280+07:00  INFO 18695 --- [demo] [  restartedMain] org.apache.jasper.servlet.TldScanner     : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2025-06-28T04:01:03.281+07:00  INFO 18695 --- [demo] [  restartedMain] o.a.c.c.C.[Tomcat-1].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2025-06-28T04:01:03.281+07:00  INFO 18695 --- [demo] [  restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 365 ms
2025-06-28T04:01:03.318+07:00  INFO 18695 --- [demo] [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-28T04:01:03.321+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-28T04:01:03.329+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-28T04:01:03.330+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-7 - Starting...
2025-06-28T04:01:03.331+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-7 - Added connection org.sqlite.jdbc4.JDBC4Connection@676b80df
2025-06-28T04:01:03.331+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-7 - Start completed.
2025-06-28T04:01:03.332+07:00  INFO 18695 --- [demo] [  restartedMain] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-7)']
	Database driver: undefined/unknown
	Database version: 3.47.2
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-28T04:01:03.566+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
Hibernate: 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
2025-06-28T04:01:03.568+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:01:03.569+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:01:03.570+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:01:03.570+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:01:03.571+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:01:03.588+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-28T04:01:03.596+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
Hibernate: 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
2025-06-28T04:01:03.597+07:00  INFO 18695 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:01:03.989+07:00  WARN 18695 --- [demo] [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-28T04:01:03.994+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2025-06-28T04:01:04.022+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : 77 mappings in 'requestMappingHandlerMapping'
2025-06-28T04:01:04.060+07:00 DEBUG 18695 --- [demo] [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-28T04:01:04.073+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-28T04:01:04.085+07:00 DEBUG 18695 --- [demo] [  restartedMain] .m.m.a.ExceptionHandlerExceptionResolver : ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-28T04:01:04.107+07:00  WARN 18695 --- [demo] [  restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #2 of file [/home/bxs/AIMSspringboot-react/target/classes/data.sql]: INSERT OR IGNORE INTO product ( type, title, price, weight, rush_order_supported, dimensions, condition, image_url, barcode, import_date, introduction, quantity, created_at, updated_at ) VALUES ( 'book', 'The Great Gatsby', 120000, 0.3, 0, '20x13x2 cm', 'New', 'https://covers.openlibrary.org/b/id/8225261-L.jpg', '978-0-7432-7356-5', '2024-01-15', 'A classic American novel about the Jazz Age and the American Dream.', 25, datetime ('now'), datetime ('now') ), ( 'book', 'To Kill a Mockingbird', 135000, 0.35, 0, '21x14x2.5 cm', 'New', 'https://covers.openlibrary.org/b/id/8226816-L.jpg', '978-0-06-112008-4', '2024-01-10', 'A gripping tale of racial injustice and childhood innocence in the American South.', 30, datetime ('now'), datetime ('now') ), ( 'book', '1984', 145000, 0.28, 1, '20x13x2 cm', 'New', 'https://covers.openlibrary.org/b/id/8226112-L.jpg', '978-0-452-28423-4', '2024-01-12', 'A dystopian social science fiction novel about totalitarianism.', 40, datetime ('now'), datetime ('now') ), ( 'cd', 'Abbey Road', 350000, 300000, 0.1, 0, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/4/42/Beatles_-_Abbey_Road.jpg', '094638241621', '2024-01-20', 'The Beatles final studio album featuring Come Together.', 15, datetime ('now'), datetime ('now') ), ( 'cd', 'Dark Side of the Moon', 380000, 300000, 0.1, 1, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/3/3b/Dark_Side_of_the_Moon.png', '094637420621', '2024-01-18', 'Pink Floyd masterpiece exploring conflict and madness.', 20, datetime ('now'), datetime ('now') ), ( 'cd', 'Thriller', 340000, 300000, 0.1, 0, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/5/55/Michael_Jackson_-_Thriller.png', '074643851428', '2024-01-22', 'Michael Jackson''s Thriller with Billie Jean and Beat It.', 18, datetime ('now'), datetime ('now') ), ( 'dvd', 'The Shawshank Redemption', 220000, 180000, 0.15, 0, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/519NBNHX5BL._AC_.jpg', '085391163926', '2024-01-25', 'A story of friendship and redemption in prison.', 12, datetime ('now'), datetime ('now') ), ( 'dvd', 'The Godfather', 250000, 180000, 0.15, 1, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/41+dkHBquGL._AC_.jpg', '097360719147', '2024-01-23', 'The aging patriarch hands control to his son.', 10, datetime ('now'), datetime ('now') ), ( 'dvd', 'Pulp Fiction', 210000, 180000, 0.15, 0, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/71c05lTE03L._AC_SL1024_.jpg', '031398187737', '2024-01-24', 'Tarantino''s cult classic about L.A. criminals.', 14, datetime ('now'), datetime ('now') )
2025-06-28T04:01:04.108+07:00  INFO 18695 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:01:04.109+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-7 - Shutdown initiated...
2025-06-28T04:01:04.110+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-7 - Shutdown completed.
2025-06-28T04:01:04.111+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2025-06-28T04:01:04.114+07:00  INFO 18695 --- [demo] [  restartedMain] .s.b.a.l.ConditionEvaluationReportLogger : 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-28T04:01:04.116+07:00 ERROR 18695 --- [demo] [  restartedMain] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #2 of file [/home/bxs/AIMSspringboot-react/target/classes/data.sql]: INSERT OR IGNORE INTO product ( type, title, price, weight, rush_order_supported, dimensions, condition, image_url, barcode, import_date, introduction, quantity, created_at, updated_at ) VALUES ( 'book', 'The Great Gatsby', 120000, 0.3, 0, '20x13x2 cm', 'New', 'https://covers.openlibrary.org/b/id/8225261-L.jpg', '978-0-7432-7356-5', '2024-01-15', 'A classic American novel about the Jazz Age and the American Dream.', 25, datetime ('now'), datetime ('now') ), ( 'book', 'To Kill a Mockingbird', 135000, 0.35, 0, '21x14x2.5 cm', 'New', 'https://covers.openlibrary.org/b/id/8226816-L.jpg', '978-0-06-112008-4', '2024-01-10', 'A gripping tale of racial injustice and childhood innocence in the American South.', 30, datetime ('now'), datetime ('now') ), ( 'book', '1984', 145000, 0.28, 1, '20x13x2 cm', 'New', 'https://covers.openlibrary.org/b/id/8226112-L.jpg', '978-0-452-28423-4', '2024-01-12', 'A dystopian social science fiction novel about totalitarianism.', 40, datetime ('now'), datetime ('now') ), ( 'cd', 'Abbey Road', 350000, 300000, 0.1, 0, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/4/42/Beatles_-_Abbey_Road.jpg', '094638241621', '2024-01-20', 'The Beatles final studio album featuring Come Together.', 15, datetime ('now'), datetime ('now') ), ( 'cd', 'Dark Side of the Moon', 380000, 300000, 0.1, 1, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/3/3b/Dark_Side_of_the_Moon.png', '094637420621', '2024-01-18', 'Pink Floyd masterpiece exploring conflict and madness.', 20, datetime ('now'), datetime ('now') ), ( 'cd', 'Thriller', 340000, 300000, 0.1, 0, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/5/55/Michael_Jackson_-_Thriller.png', '074643851428', '2024-01-22', 'Michael Jackson''s Thriller with Billie Jean and Beat It.', 18, datetime ('now'), datetime ('now') ), ( 'dvd', 'The Shawshank Redemption', 220000, 180000, 0.15, 0, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/519NBNHX5BL._AC_.jpg', '085391163926', '2024-01-25', 'A story of friendship and redemption in prison.', 12, datetime ('now'), datetime ('now') ), ( 'dvd', 'The Godfather', 250000, 180000, 0.15, 1, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/41+dkHBquGL._AC_.jpg', '097360719147', '2024-01-23', 'The aging patriarch hands control to his son.', 10, datetime ('now'), datetime ('now') ), ( 'dvd', 'Pulp Fiction', 210000, 180000, 0.15, 0, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/71c05lTE03L._AC_SL1024_.jpg', '031398187737', '2024-01-24', 'Tarantino''s cult classic about L.A. criminals.', 14, datetime ('now'), datetime ('now') )
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1812) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:347) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.instantiateSingleton(DefaultListableBeanFactory.java:1155) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingleton(DefaultListableBeanFactory.java:1121) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:1056) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:987) ~[spring-context-6.2.5.jar:6.2.5]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627) ~[spring-context-6.2.5.jar:6.2.5]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1361) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1350) ~[spring-boot-3.4.4.jar:3.4.4]
	at com.itss.ecommerce.EcommerceApplication.main(EcommerceApplication.java:11) ~[classes/:na]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50) ~[spring-boot-devtools-3.4.4.jar:3.4.4]
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #2 of file [/home/bxs/AIMSspringboot-react/target/classes/data.sql]: INSERT OR IGNORE INTO product ( type, title, price, weight, rush_order_supported, dimensions, condition, image_url, barcode, import_date, introduction, quantity, created_at, updated_at ) VALUES ( 'book', 'The Great Gatsby', 120000, 0.3, 0, '20x13x2 cm', 'New', 'https://covers.openlibrary.org/b/id/8225261-L.jpg', '978-0-7432-7356-5', '2024-01-15', 'A classic American novel about the Jazz Age and the American Dream.', 25, datetime ('now'), datetime ('now') ), ( 'book', 'To Kill a Mockingbird', 135000, 0.35, 0, '21x14x2.5 cm', 'New', 'https://covers.openlibrary.org/b/id/8226816-L.jpg', '978-0-06-112008-4', '2024-01-10', 'A gripping tale of racial injustice and childhood innocence in the American South.', 30, datetime ('now'), datetime ('now') ), ( 'book', '1984', 145000, 0.28, 1, '20x13x2 cm', 'New', 'https://covers.openlibrary.org/b/id/8226112-L.jpg', '978-0-452-28423-4', '2024-01-12', 'A dystopian social science fiction novel about totalitarianism.', 40, datetime ('now'), datetime ('now') ), ( 'cd', 'Abbey Road', 350000, 300000, 0.1, 0, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/4/42/Beatles_-_Abbey_Road.jpg', '094638241621', '2024-01-20', 'The Beatles final studio album featuring Come Together.', 15, datetime ('now'), datetime ('now') ), ( 'cd', 'Dark Side of the Moon', 380000, 300000, 0.1, 1, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/3/3b/Dark_Side_of_the_Moon.png', '094637420621', '2024-01-18', 'Pink Floyd masterpiece exploring conflict and madness.', 20, datetime ('now'), datetime ('now') ), ( 'cd', 'Thriller', 340000, 300000, 0.1, 0, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/5/55/Michael_Jackson_-_Thriller.png', '074643851428', '2024-01-22', 'Michael Jackson''s Thriller with Billie Jean and Beat It.', 18, datetime ('now'), datetime ('now') ), ( 'dvd', 'The Shawshank Redemption', 220000, 180000, 0.15, 0, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/519NBNHX5BL._AC_.jpg', '085391163926', '2024-01-25', 'A story of friendship and redemption in prison.', 12, datetime ('now'), datetime ('now') ), ( 'dvd', 'The Godfather', 250000, 180000, 0.15, 1, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/41+dkHBquGL._AC_.jpg', '097360719147', '2024-01-23', 'The aging patriarch hands control to his son.', 10, datetime ('now'), datetime ('now') ), ( 'dvd', 'Pulp Fiction', 210000, 180000, 0.15, 0, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/71c05lTE03L._AC_SL1024_.jpg', '031398187737', '2024-01-24', 'Tarantino''s cult classic about L.A. criminals.', 14, datetime ('now'), datetime ('now') )
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282) ~[spring-jdbc-6.2.5.jar:6.2.5]
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254) ~[spring-jdbc-6.2.5.jar:6.2.5]
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54) ~[spring-jdbc-6.2.5.jar:6.2.5]
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1859) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1808) ~[spring-beans-6.2.5.jar:6.2.5]
	... 23 common frames omitted
Caused by: org.sqlite.SQLiteException: [SQLITE_ERROR] SQL error or missing database (all VALUES must have the same number of terms)
	at org.sqlite.core.DB.newSQLException(DB.java:1179) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.core.DB.newSQLException(DB.java:1190) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.core.DB.throwex(DB.java:1150) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.core.NativeDB.prepare_utf8(Native Method) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.core.NativeDB.prepare(NativeDB.java:135) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.core.DB.prepare(DB.java:264) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.jdbc3.JDBC3Statement.lambda$execute$0(JDBC3Statement.java:55) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.jdbc3.JDBC3Statement.withConnectionTimeout(JDBC3Statement.java:458) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.jdbc3.JDBC3Statement.execute(JDBC3Statement.java:44) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.1.0.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.1.0.jar:na]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261) ~[spring-jdbc-6.2.5.jar:6.2.5]
	... 33 common frames omitted


  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.4)

2025-06-28T04:01:35.744+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Starting EcommerceApplication using Java 21.0.6 with PID 18695 (/home/bxs/AIMSspringboot-react/target/classes started by bxs in /home/bxs/AIMSspringboot-react)
2025-06-28T04:01:35.744+07:00 DEBUG 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Running with Spring Boot v3.4.4, Spring v6.2.5
2025-06-28T04:01:35.744+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : No active profile set, falling back to 1 default profile: "default"
2025-06-28T04:01:35.891+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-28T04:01:35.891+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-28T04:01:35.921+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 29 ms. Found 12 JPA repository interfaces.
2025-06-28T04:01:36.081+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-28T04:01:36.081+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-28T04:01:36.081+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-06-28T04:01:36.141+07:00  INFO 18695 --- [demo] [  restartedMain] org.apache.jasper.servlet.TldScanner     : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2025-06-28T04:01:36.142+07:00  INFO 18695 --- [demo] [  restartedMain] o.a.c.c.C.[Tomcat-2].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2025-06-28T04:01:36.142+07:00  INFO 18695 --- [demo] [  restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 397 ms
2025-06-28T04:01:36.178+07:00  INFO 18695 --- [demo] [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-28T04:01:36.180+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-28T04:01:36.186+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-28T04:01:36.189+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-8 - Starting...
2025-06-28T04:01:36.190+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-8 - Added connection org.sqlite.jdbc4.JDBC4Connection@36ccfee9
2025-06-28T04:01:36.191+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-8 - Start completed.
2025-06-28T04:01:36.191+07:00  INFO 18695 --- [demo] [  restartedMain] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-8)']
	Database driver: undefined/unknown
	Database version: 3.47.2
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-28T04:01:36.435+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
Hibernate: 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
2025-06-28T04:01:36.438+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:01:36.439+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:01:36.440+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:01:36.441+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:01:36.441+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:01:36.452+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-28T04:01:36.461+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
Hibernate: 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
2025-06-28T04:01:36.461+07:00  INFO 18695 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:01:36.845+07:00  WARN 18695 --- [demo] [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-28T04:01:36.851+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2025-06-28T04:01:36.874+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : 77 mappings in 'requestMappingHandlerMapping'
2025-06-28T04:01:36.908+07:00 DEBUG 18695 --- [demo] [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-28T04:01:36.915+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-28T04:01:36.922+07:00 DEBUG 18695 --- [demo] [  restartedMain] .m.m.a.ExceptionHandlerExceptionResolver : ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-28T04:01:36.930+07:00  WARN 18695 --- [demo] [  restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #2 of file [/home/bxs/AIMSspringboot-react/target/classes/data.sql]: INSERT OR IGNORE INTO product ( type, title, price, weight, rush_order_supported, dimensions, condition, image_url, barcode, import_date, introduction, quantity, created_at, updated_at ) VALUES ( 'book', 'The Great Gatsby', 120000, 0.3, 0, '20x13x2 cm', 'New', 'https://covers.openlibrary.org/b/id/8225261-L.jpg', '978-0-7432-7356-5', '2024-01-15', 'A classic American novel about the Jazz Age and the American Dream.', 25, datetime ('now'), datetime ('now') ), ( 'book', 'To Kill a Mockingbird', 135000, 0.35, 0, '21x14x2.5 cm', 'New', 'https://covers.openlibrary.org/b/id/8226816-L.jpg', '978-0-06-112008-4', '2024-01-10', 'A gripping tale of racial injustice and childhood innocence in the American South.', 30, datetime ('now'), datetime ('now') ), ( 'book', '1984', 145000, 0.28, 1, '20x13x2 cm', 'New', 'https://covers.openlibrary.org/b/id/8226112-L.jpg', '978-0-452-28423-4', '2024-01-12', 'A dystopian social science fiction novel about totalitarianism.', 40, datetime ('now'), datetime ('now') ), ( 'cd', 'Abbey Road', 350000, 0.1, 0, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/4/42/Beatles_-_Abbey_Road.jpg', '094638241621', '2024-01-20', 'The Beatles final studio album featuring Come Together.', 15, datetime ('now'), datetime ('now') ), ( 'cd', 'Dark Side of the Moon', 380000, 0.1, 1, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/3/3b/Dark_Side_of_the_Moon.png', '094637420621', '2024-01-18', 'Pink Floyd masterpiece exploring conflict and madness.', 20, datetime ('now'), datetime ('now') ), ( 'cd', 'Thriller', 340000, 0.1, 0, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/5/55/Michael_Jackson_-_Thriller.png', '074643851428', '2024-01-22', 'Michael Jackson''s Thriller with Billie Jean and Beat It.', 18, datetime ('now'), datetime ('now') ), ( 'dvd', 'The Shawshank Redemption', 220000, 180000, 0.15, 0, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/519NBNHX5BL._AC_.jpg', '085391163926', '2024-01-25', 'A story of friendship and redemption in prison.', 12, datetime ('now'), datetime ('now') ), ( 'dvd', 'The Godfather', 250000, 180000, 0.15, 1, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/41+dkHBquGL._AC_.jpg', '097360719147', '2024-01-23', 'The aging patriarch hands control to his son.', 10, datetime ('now'), datetime ('now') ), ( 'dvd', 'Pulp Fiction', 210000, 180000, 0.15, 0, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/71c05lTE03L._AC_SL1024_.jpg', '031398187737', '2024-01-24', 'Tarantino''s cult classic about L.A. criminals.', 14, datetime ('now'), datetime ('now') )
2025-06-28T04:01:36.930+07:00  INFO 18695 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:01:36.931+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-8 - Shutdown initiated...
2025-06-28T04:01:36.931+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-8 - Shutdown completed.
2025-06-28T04:01:36.932+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2025-06-28T04:01:36.935+07:00  INFO 18695 --- [demo] [  restartedMain] .s.b.a.l.ConditionEvaluationReportLogger : 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-28T04:01:36.936+07:00 ERROR 18695 --- [demo] [  restartedMain] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #2 of file [/home/bxs/AIMSspringboot-react/target/classes/data.sql]: INSERT OR IGNORE INTO product ( type, title, price, weight, rush_order_supported, dimensions, condition, image_url, barcode, import_date, introduction, quantity, created_at, updated_at ) VALUES ( 'book', 'The Great Gatsby', 120000, 0.3, 0, '20x13x2 cm', 'New', 'https://covers.openlibrary.org/b/id/8225261-L.jpg', '978-0-7432-7356-5', '2024-01-15', 'A classic American novel about the Jazz Age and the American Dream.', 25, datetime ('now'), datetime ('now') ), ( 'book', 'To Kill a Mockingbird', 135000, 0.35, 0, '21x14x2.5 cm', 'New', 'https://covers.openlibrary.org/b/id/8226816-L.jpg', '978-0-06-112008-4', '2024-01-10', 'A gripping tale of racial injustice and childhood innocence in the American South.', 30, datetime ('now'), datetime ('now') ), ( 'book', '1984', 145000, 0.28, 1, '20x13x2 cm', 'New', 'https://covers.openlibrary.org/b/id/8226112-L.jpg', '978-0-452-28423-4', '2024-01-12', 'A dystopian social science fiction novel about totalitarianism.', 40, datetime ('now'), datetime ('now') ), ( 'cd', 'Abbey Road', 350000, 0.1, 0, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/4/42/Beatles_-_Abbey_Road.jpg', '094638241621', '2024-01-20', 'The Beatles final studio album featuring Come Together.', 15, datetime ('now'), datetime ('now') ), ( 'cd', 'Dark Side of the Moon', 380000, 0.1, 1, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/3/3b/Dark_Side_of_the_Moon.png', '094637420621', '2024-01-18', 'Pink Floyd masterpiece exploring conflict and madness.', 20, datetime ('now'), datetime ('now') ), ( 'cd', 'Thriller', 340000, 0.1, 0, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/5/55/Michael_Jackson_-_Thriller.png', '074643851428', '2024-01-22', 'Michael Jackson''s Thriller with Billie Jean and Beat It.', 18, datetime ('now'), datetime ('now') ), ( 'dvd', 'The Shawshank Redemption', 220000, 180000, 0.15, 0, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/519NBNHX5BL._AC_.jpg', '085391163926', '2024-01-25', 'A story of friendship and redemption in prison.', 12, datetime ('now'), datetime ('now') ), ( 'dvd', 'The Godfather', 250000, 180000, 0.15, 1, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/41+dkHBquGL._AC_.jpg', '097360719147', '2024-01-23', 'The aging patriarch hands control to his son.', 10, datetime ('now'), datetime ('now') ), ( 'dvd', 'Pulp Fiction', 210000, 180000, 0.15, 0, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/71c05lTE03L._AC_SL1024_.jpg', '031398187737', '2024-01-24', 'Tarantino''s cult classic about L.A. criminals.', 14, datetime ('now'), datetime ('now') )
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1812) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:347) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.instantiateSingleton(DefaultListableBeanFactory.java:1155) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingleton(DefaultListableBeanFactory.java:1121) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:1056) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:987) ~[spring-context-6.2.5.jar:6.2.5]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627) ~[spring-context-6.2.5.jar:6.2.5]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1361) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1350) ~[spring-boot-3.4.4.jar:3.4.4]
	at com.itss.ecommerce.EcommerceApplication.main(EcommerceApplication.java:11) ~[classes/:na]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50) ~[spring-boot-devtools-3.4.4.jar:3.4.4]
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #2 of file [/home/bxs/AIMSspringboot-react/target/classes/data.sql]: INSERT OR IGNORE INTO product ( type, title, price, weight, rush_order_supported, dimensions, condition, image_url, barcode, import_date, introduction, quantity, created_at, updated_at ) VALUES ( 'book', 'The Great Gatsby', 120000, 0.3, 0, '20x13x2 cm', 'New', 'https://covers.openlibrary.org/b/id/8225261-L.jpg', '978-0-7432-7356-5', '2024-01-15', 'A classic American novel about the Jazz Age and the American Dream.', 25, datetime ('now'), datetime ('now') ), ( 'book', 'To Kill a Mockingbird', 135000, 0.35, 0, '21x14x2.5 cm', 'New', 'https://covers.openlibrary.org/b/id/8226816-L.jpg', '978-0-06-112008-4', '2024-01-10', 'A gripping tale of racial injustice and childhood innocence in the American South.', 30, datetime ('now'), datetime ('now') ), ( 'book', '1984', 145000, 0.28, 1, '20x13x2 cm', 'New', 'https://covers.openlibrary.org/b/id/8226112-L.jpg', '978-0-452-28423-4', '2024-01-12', 'A dystopian social science fiction novel about totalitarianism.', 40, datetime ('now'), datetime ('now') ), ( 'cd', 'Abbey Road', 350000, 0.1, 0, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/4/42/Beatles_-_Abbey_Road.jpg', '094638241621', '2024-01-20', 'The Beatles final studio album featuring Come Together.', 15, datetime ('now'), datetime ('now') ), ( 'cd', 'Dark Side of the Moon', 380000, 0.1, 1, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/3/3b/Dark_Side_of_the_Moon.png', '094637420621', '2024-01-18', 'Pink Floyd masterpiece exploring conflict and madness.', 20, datetime ('now'), datetime ('now') ), ( 'cd', 'Thriller', 340000, 0.1, 0, '14x12x1 cm', 'New', 'https://upload.wikimedia.org/wikipedia/en/5/55/Michael_Jackson_-_Thriller.png', '074643851428', '2024-01-22', 'Michael Jackson''s Thriller with Billie Jean and Beat It.', 18, datetime ('now'), datetime ('now') ), ( 'dvd', 'The Shawshank Redemption', 220000, 180000, 0.15, 0, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/519NBNHX5BL._AC_.jpg', '085391163926', '2024-01-25', 'A story of friendship and redemption in prison.', 12, datetime ('now'), datetime ('now') ), ( 'dvd', 'The Godfather', 250000, 180000, 0.15, 1, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/41+dkHBquGL._AC_.jpg', '097360719147', '2024-01-23', 'The aging patriarch hands control to his son.', 10, datetime ('now'), datetime ('now') ), ( 'dvd', 'Pulp Fiction', 210000, 180000, 0.15, 0, '19x13x1.5 cm', 'New', 'https://m.media-amazon.com/images/I/71c05lTE03L._AC_SL1024_.jpg', '031398187737', '2024-01-24', 'Tarantino''s cult classic about L.A. criminals.', 14, datetime ('now'), datetime ('now') )
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282) ~[spring-jdbc-6.2.5.jar:6.2.5]
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254) ~[spring-jdbc-6.2.5.jar:6.2.5]
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54) ~[spring-jdbc-6.2.5.jar:6.2.5]
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1859) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1808) ~[spring-beans-6.2.5.jar:6.2.5]
	... 23 common frames omitted
Caused by: org.sqlite.SQLiteException: [SQLITE_ERROR] SQL error or missing database (all VALUES must have the same number of terms)
	at org.sqlite.core.DB.newSQLException(DB.java:1179) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.core.DB.newSQLException(DB.java:1190) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.core.DB.throwex(DB.java:1150) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.core.NativeDB.prepare_utf8(Native Method) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.core.NativeDB.prepare(NativeDB.java:135) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.core.DB.prepare(DB.java:264) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.jdbc3.JDBC3Statement.lambda$execute$0(JDBC3Statement.java:55) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.jdbc3.JDBC3Statement.withConnectionTimeout(JDBC3Statement.java:458) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at org.sqlite.jdbc3.JDBC3Statement.execute(JDBC3Statement.java:44) ~[sqlite-jdbc-3.47.2.0.jar:na]
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94) ~[HikariCP-5.1.0.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java) ~[HikariCP-5.1.0.jar:na]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261) ~[spring-jdbc-6.2.5.jar:6.2.5]
	... 33 common frames omitted


  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.4)

2025-06-28T04:02:00.542+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Starting EcommerceApplication using Java 21.0.6 with PID 18695 (/home/bxs/AIMSspringboot-react/target/classes started by bxs in /home/bxs/AIMSspringboot-react)
2025-06-28T04:02:00.542+07:00 DEBUG 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Running with Spring Boot v3.4.4, Spring v6.2.5
2025-06-28T04:02:00.542+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : No active profile set, falling back to 1 default profile: "default"
2025-06-28T04:02:00.696+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-28T04:02:00.696+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-28T04:02:00.736+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 38 ms. Found 12 JPA repository interfaces.
2025-06-28T04:02:00.891+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-28T04:02:00.891+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-28T04:02:00.892+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-06-28T04:02:00.947+07:00  INFO 18695 --- [demo] [  restartedMain] org.apache.jasper.servlet.TldScanner     : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2025-06-28T04:02:00.949+07:00  INFO 18695 --- [demo] [  restartedMain] o.a.c.c.C.[Tomcat-3].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2025-06-28T04:02:00.949+07:00  INFO 18695 --- [demo] [  restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 405 ms
2025-06-28T04:02:00.988+07:00  INFO 18695 --- [demo] [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-28T04:02:00.990+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-28T04:02:00.999+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-28T04:02:01.000+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-9 - Starting...
2025-06-28T04:02:01.001+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-9 - Added connection org.sqlite.jdbc4.JDBC4Connection@55a1a5ab
2025-06-28T04:02:01.001+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-9 - Start completed.
2025-06-28T04:02:01.002+07:00  INFO 18695 --- [demo] [  restartedMain] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-9)']
	Database driver: undefined/unknown
	Database version: 3.47.2
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-28T04:02:01.232+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
Hibernate: 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
2025-06-28T04:02:01.234+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:02:01.234+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:02:01.235+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:02:01.235+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:02:01.236+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:02:01.252+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-28T04:02:01.258+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
Hibernate: 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
2025-06-28T04:02:01.259+07:00  INFO 18695 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:02:01.705+07:00  WARN 18695 --- [demo] [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-28T04:02:01.712+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2025-06-28T04:02:01.735+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : 77 mappings in 'requestMappingHandlerMapping'
2025-06-28T04:02:01.759+07:00 DEBUG 18695 --- [demo] [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-28T04:02:01.765+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-28T04:02:01.774+07:00 DEBUG 18695 --- [demo] [  restartedMain] .m.m.a.ExceptionHandlerExceptionResolver : ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-28T04:02:01.794+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:sqlite:./data/ITSS_demo2.db'
2025-06-28T04:02:01.803+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2025-06-28T04:02:01.814+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-06-28T04:02:01.817+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Started EcommerceApplication in 1.316 seconds (process running for 4399.022)
2025-06-28T04:02:01.819+07:00  INFO 18695 --- [demo] [  restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2025-06-28T04:02:02.557+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] o.a.c.c.C.[Tomcat-3].[localhost].[/]     : Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-28T04:02:02.557+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2025-06-28T04:02:02.557+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected StandardServletMultipartResolver
2025-06-28T04:02:02.557+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected AcceptHeaderLocaleResolver
2025-06-28T04:02:02.557+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected FixedThemeResolver
2025-06-28T04:02:02.558+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@2d201a5b
2025-06-28T04:02:02.558+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected org.springframework.web.servlet.support.SessionFlashMapManager@940cea
2025-06-28T04:02:02.559+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-06-28T04:02:02.559+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2025-06-28T04:02:02.560+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T04:02:02.560+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T04:02:02.560+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T04:02:02.560+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T04:02:02.561+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T04:02:02.562+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T04:02:02.568+07:00  INFO 18695 --- [demo] [nio-8080-exec-2] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T04:02:02.568+07:00  INFO 18695 --- [demo] [nio-8080-exec-3] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T04:02:02.569+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T04:02:02.569+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T04:02:02.569+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T04:02:02.570+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T04:02:02.571+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T04:02:02.571+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T04:02:02.571+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T04:02:02.574+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:02:02.578+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T04:02:02.578+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T04:02:02.581+07:00  INFO 18695 --- [demo] [nio-8080-exec-4] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T04:02:02.582+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T04:02:02.582+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:02:02.583+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:02:02.584+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T04:02:02.585+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:02:02.587+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:02:02.588+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:02:02.589+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:02:02.590+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:02:02.592+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:02:02.593+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T04:02:02.593+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T04:02:02.594+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:02:02.593+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T04:02:02.597+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:02:02.600+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:02:02.602+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:02:02.605+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:02:02.607+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:02:02.610+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:02:02.612+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:02:02.614+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:02:02.616+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:02:02.618+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:02:02.619+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:02:02.622+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:02:02.626+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:02:02.627+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:02:02.630+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:02:02.632+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:02:02.633+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:02:02.634+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:02:02.636+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:02:02.637+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:02:02.642+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:02:02.644+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:02:02.647+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:02:02.648+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:02:02.649+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:02:02.650+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:02:02.652+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:02:02.652+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:02:02.653+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:02:02.655+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:02:02.656+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:02:02.659+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:02:02.660+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:02:02.663+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:02:02.664+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:02:02.665+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:02:02.680+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T04:02:02.717+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:02:42.933+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T04:02:42.933+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T04:02:42.933+07:00  INFO 18695 --- [demo] [nio-8080-exec-5] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T04:02:42.934+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T04:02:42.935+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T04:02:42.938+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:02:42.938+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T04:02:42.940+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:04:19.775+07:00  INFO 18695 --- [demo] [   File Watcher] rtingClassPathChangeChangedEventListener : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-06-28T04:04:19.777+07:00  INFO 18695 --- [demo] [      Thread-24] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete
2025-06-28T04:04:19.779+07:00  INFO 18695 --- [demo] [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown complete
2025-06-28T04:04:19.781+07:00  INFO 18695 --- [demo] [      Thread-24] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:04:19.783+07:00  INFO 18695 --- [demo] [      Thread-24] com.zaxxer.hikari.HikariDataSource       : HikariPool-9 - Shutdown initiated...
2025-06-28T04:04:19.788+07:00  INFO 18695 --- [demo] [      Thread-24] com.zaxxer.hikari.HikariDataSource       : HikariPool-9 - Shutdown completed.

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.4)

2025-06-28T04:04:20.024+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Starting EcommerceApplication using Java 21.0.6 with PID 18695 (/home/bxs/AIMSspringboot-react/target/classes started by bxs in /home/bxs/AIMSspringboot-react)
2025-06-28T04:04:20.025+07:00 DEBUG 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Running with Spring Boot v3.4.4, Spring v6.2.5
2025-06-28T04:04:20.025+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : No active profile set, falling back to 1 default profile: "default"
2025-06-28T04:04:20.216+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-28T04:04:20.216+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-28T04:04:20.245+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 28 ms. Found 12 JPA repository interfaces.
2025-06-28T04:04:20.484+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-28T04:04:20.485+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-28T04:04:20.485+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-06-28T04:04:20.575+07:00  INFO 18695 --- [demo] [  restartedMain] org.apache.jasper.servlet.TldScanner     : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2025-06-28T04:04:20.577+07:00  INFO 18695 --- [demo] [  restartedMain] o.a.c.c.C.[Tomcat-3].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2025-06-28T04:04:20.577+07:00  INFO 18695 --- [demo] [  restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 551 ms
2025-06-28T04:04:20.634+07:00  INFO 18695 --- [demo] [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-28T04:04:20.636+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-28T04:04:20.644+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-28T04:04:20.646+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-10 - Starting...
2025-06-28T04:04:20.647+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-10 - Added connection org.sqlite.jdbc4.JDBC4Connection@4aa56138
2025-06-28T04:04:20.647+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-10 - Start completed.
2025-06-28T04:04:20.648+07:00  INFO 18695 --- [demo] [  restartedMain] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-10)']
	Database driver: undefined/unknown
	Database version: 3.47.2
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-28T04:04:21.010+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
Hibernate: 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
2025-06-28T04:04:21.012+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:04:21.014+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:04:21.014+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:04:21.016+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:04:21.016+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:04:21.041+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-28T04:04:21.051+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
Hibernate: 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
2025-06-28T04:04:21.052+07:00  INFO 18695 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:04:21.635+07:00  WARN 18695 --- [demo] [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-28T04:04:21.651+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2025-06-28T04:04:21.696+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : 77 mappings in 'requestMappingHandlerMapping'
2025-06-28T04:04:21.747+07:00 DEBUG 18695 --- [demo] [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-28T04:04:21.760+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-28T04:04:21.773+07:00 DEBUG 18695 --- [demo] [  restartedMain] .m.m.a.ExceptionHandlerExceptionResolver : ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-28T04:04:21.805+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:sqlite:./data/ITSS_demo2.db'
2025-06-28T04:04:21.820+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2025-06-28T04:04:21.834+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-06-28T04:04:21.839+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Started EcommerceApplication in 1.859 seconds (process running for 4539.044)
2025-06-28T04:04:21.841+07:00  INFO 18695 --- [demo] [  restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2025-06-28T04:08:30.722+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] o.a.c.c.C.[Tomcat-3].[localhost].[/]     : Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-28T04:08:30.722+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2025-06-28T04:08:30.722+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected StandardServletMultipartResolver
2025-06-28T04:08:30.722+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected AcceptHeaderLocaleResolver
2025-06-28T04:08:30.722+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected FixedThemeResolver
2025-06-28T04:08:30.723+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@45b9c46a
2025-06-28T04:08:30.724+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected org.springframework.web.servlet.support.SessionFlashMapManager@661c0216
2025-06-28T04:08:30.724+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-06-28T04:08:30.724+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2025-06-28T04:08:30.726+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T04:08:30.727+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T04:08:30.727+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T04:08:30.727+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T04:08:30.727+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T04:08:30.727+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T04:08:30.729+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T04:08:30.729+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T04:08:30.734+07:00  INFO 18695 --- [demo] [nio-8080-exec-3] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T04:08:30.735+07:00  INFO 18695 --- [demo] [nio-8080-exec-2] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T04:08:30.735+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T04:08:30.735+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T04:08:30.736+07:00  INFO 18695 --- [demo] [nio-8080-exec-4] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T04:08:30.737+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T04:08:30.739+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T04:08:30.740+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T04:08:30.743+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:30.740+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T04:08:30.745+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:30.747+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:30.750+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:30.754+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T04:08:30.756+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T04:08:30.755+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:30.760+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:30.762+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:30.765+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:30.767+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:30.777+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:30.765+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:08:30.782+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T04:08:30.783+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:30.789+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:30.783+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:08:30.784+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T04:08:30.802+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:30.814+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:08:30.819+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:08:30.819+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:30.824+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:08:30.820+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T04:08:30.836+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:30.838+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:30.839+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T04:08:30.843+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:08:30.847+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:30.850+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:08:30.862+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:30.866+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:30.867+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:30.864+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:08:30.871+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:30.874+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:30.879+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:30.881+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:30.883+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:30.898+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:30.900+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:30.902+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:30.904+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:30.907+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:30.910+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:30.912+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:30.924+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:08:30.926+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:30.927+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:30.929+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:30.930+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:30.935+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:08:30.981+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T04:08:31.021+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:08:32.316+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T04:08:32.318+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T04:08:32.317+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T04:08:32.318+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T04:08:32.318+07:00  INFO 18695 --- [demo] [nio-8080-exec-5] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T04:08:32.319+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T04:08:32.320+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T04:08:32.318+07:00  INFO 18695 --- [demo] [nio-8080-exec-6] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T04:08:32.322+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T04:08:32.323+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T04:08:32.323+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:08:32.324+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T04:08:32.324+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:32.325+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:08:32.327+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:32.328+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:32.329+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:32.330+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:32.331+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:32.332+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:32.332+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:32.333+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:32.336+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:32.336+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:32.337+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:08:32.339+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:32.340+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:32.341+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:08:32.342+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:32.343+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:32.345+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:08:32.346+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:32.348+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:32.349+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:32.350+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T04:08:32.350+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T04:08:32.350+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:32.351+07:00  INFO 18695 --- [demo] [nio-8080-exec-7] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T04:08:32.351+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:32.351+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T04:08:32.352+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:32.353+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T04:08:32.353+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:32.355+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:08:32.355+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T04:08:32.356+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:32.357+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:32.357+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:08:32.358+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:32.359+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T04:08:32.360+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T04:08:32.361+07:00  INFO 18695 --- [demo] [nio-8080-exec-9] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T04:08:32.361+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T04:08:32.362+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T04:08:32.364+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:32.364+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:08:32.364+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T04:08:32.364+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:32.365+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:08:32.366+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:32.367+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:32.368+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:32.369+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:32.375+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:08:32.376+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:32.377+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:32.378+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:08:32.379+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:08:32.380+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:08:32.382+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T04:08:32.388+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:13:40.084+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T04:13:40.086+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T04:13:40.087+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T04:13:40.089+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T04:13:40.090+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T04:13:40.093+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T04:13:40.094+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T04:13:40.094+07:00  INFO 18695 --- [demo] [nio-8080-exec-2] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T04:13:40.095+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T04:13:40.095+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T04:13:40.095+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T04:13:40.096+07:00  INFO 18695 --- [demo] [nio-8080-exec-5] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T04:13:40.096+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T04:13:40.096+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T04:13:40.097+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T04:13:40.097+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:13:40.122+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T04:13:40.122+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T04:13:40.122+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:13:40.122+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:13:40.123+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:13:40.123+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:13:40.124+07:00  INFO 18695 --- [demo] [nio-8080-exec-7] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T04:13:40.124+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T04:13:40.125+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:13:40.125+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T04:13:40.125+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T04:13:40.127+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:13:40.128+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:13:40.128+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:13:40.129+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:13:40.129+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:13:40.130+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:13:40.130+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:13:40.131+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:13:40.127+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:13:40.132+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T04:13:40.127+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T04:13:40.135+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:13:40.137+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:13:40.135+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:13:40.140+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:13:40.145+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:13:40.146+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:13:40.147+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:13:40.148+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:13:40.149+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:13:40.149+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:13:40.150+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:13:40.150+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:13:40.151+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:13:40.151+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:13:40.152+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:13:40.153+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:13:40.153+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:13:40.154+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:13:40.155+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:13:40.155+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:13:40.156+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:13:40.157+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:13:40.158+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:13:40.159+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:13:40.159+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:13:40.161+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:13:40.162+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:13:40.163+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:13:40.163+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:13:40.164+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:13:40.165+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:13:40.168+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T04:13:40.176+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:19:38.144+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T04:19:38.145+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T04:19:38.146+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T04:19:38.146+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T04:19:38.148+07:00  INFO 18695 --- [demo] [nio-8080-exec-4] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T04:19:38.149+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T04:19:38.149+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T04:19:38.152+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T04:19:38.152+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T04:19:38.153+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T04:19:38.153+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T04:19:38.153+07:00  INFO 18695 --- [demo] [nio-8080-exec-5] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T04:19:38.154+07:00  INFO 18695 --- [demo] [nio-8080-exec-3] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T04:19:38.154+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T04:19:38.155+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T04:19:38.156+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T04:19:38.153+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T04:19:38.157+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:19:38.157+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T04:19:38.161+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T04:19:38.162+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:19:38.163+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T04:19:38.157+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:19:38.164+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:19:38.165+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:19:38.165+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:19:38.166+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:19:38.166+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:19:38.167+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:19:38.168+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:19:38.160+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T04:19:38.172+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:19:38.169+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:19:38.172+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T04:19:38.175+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:19:38.174+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:19:38.176+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:19:38.177+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:19:38.177+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T04:19:38.179+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:19:38.178+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:19:38.184+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:19:38.185+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:19:38.186+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:19:38.187+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:19:38.189+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:19:38.190+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:19:38.191+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:19:38.192+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:19:38.193+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:19:38.193+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:19:38.194+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:19:38.195+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:19:38.196+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:19:38.196+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:19:38.197+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:19:38.197+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:19:38.198+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:19:38.198+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:19:38.199+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:19:38.199+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:19:38.200+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:19:38.200+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:19:38.201+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:19:38.202+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:19:38.202+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:19:38.203+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:19:38.203+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:19:38.204+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:19:38.206+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T04:19:38.209+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:26:49.204+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T04:26:49.204+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T04:26:49.205+07:00  INFO 18695 --- [demo] [nio-8080-exec-6] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T04:26:49.205+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T04:26:49.207+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T04:26:49.207+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T04:26:49.209+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T04:26:49.209+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T04:26:49.209+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T04:26:49.210+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T04:26:49.211+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T04:26:49.212+07:00  INFO 18695 --- [demo] [nio-8080-exec-9] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T04:26:49.212+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T04:26:49.213+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T04:26:49.213+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T04:26:49.213+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:26:49.214+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T04:26:49.214+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:26:49.214+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:26:49.215+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:26:49.215+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:26:49.216+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:26:49.216+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T04:26:49.217+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:26:49.217+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:26:49.218+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:26:49.219+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:26:49.219+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:26:49.220+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:26:49.223+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:26:49.225+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:26:49.225+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:26:49.227+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T04:26:49.228+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T04:26:49.228+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:26:49.229+07:00  INFO 18695 --- [demo] [nio-8080-exec-4] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T04:26:49.230+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T04:26:49.230+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:26:49.230+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T04:26:49.231+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:26:49.232+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:26:49.232+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:26:49.233+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T04:26:49.233+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:26:49.234+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:26:49.235+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:26:49.236+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:26:49.237+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:26:49.237+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:26:49.237+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:26:49.238+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:26:49.239+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:26:49.239+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:26:49.240+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:26:49.241+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:26:49.242+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:26:49.243+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:26:49.245+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:26:49.246+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:26:49.247+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:26:49.248+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:26:49.249+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:26:49.250+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:26:49.251+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:26:49.252+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:26:49.253+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:26:49.254+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:26:49.254+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:26:49.256+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:26:49.258+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T04:26:49.265+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:31:57.880+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T04:31:57.883+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T04:31:57.880+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T04:31:57.885+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T04:31:57.886+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T04:31:57.887+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T04:31:57.889+07:00  INFO 18695 --- [demo] [nio-8080-exec-2] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T04:31:57.889+07:00  INFO 18695 --- [demo] [io-8080-exec-10] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T04:31:57.889+07:00  INFO 18695 --- [demo] [nio-8080-exec-7] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T04:31:57.891+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T04:31:57.891+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T04:31:57.892+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T04:31:57.901+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T04:31:57.901+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T04:31:57.901+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T04:31:57.901+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T04:31:57.902+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T04:31:57.903+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T04:31:57.904+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T04:31:57.903+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T04:31:57.907+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:31:57.908+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:31:57.909+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:31:57.910+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:31:57.911+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:31:57.912+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:31:57.913+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:31:57.916+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T04:31:57.917+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T04:31:57.918+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:31:57.919+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:31:57.917+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T04:31:57.922+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:31:57.927+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:31:57.928+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:31:57.930+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:31:57.930+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:31:57.932+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:31:57.933+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:31:57.935+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:31:57.940+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:31:57.941+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:31:57.942+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:31:57.943+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:31:57.946+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:31:57.947+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:31:57.948+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:31:57.949+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:31:57.949+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:31:57.950+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:31:57.952+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:31:57.953+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:31:57.953+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:31:57.954+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:31:57.955+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:31:57.956+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:31:57.957+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:31:57.957+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:31:57.958+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:31:57.959+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:31:57.959+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:31:57.959+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:31:57.960+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:31:57.961+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:31:57.962+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:31:57.962+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:31:57.963+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:31:57.964+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:31:57.964+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:31:57.967+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T04:31:57.976+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:33:14.077+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : OPTIONS "/api/orders/12/confirm", parameters={}
2025-06-28T04:33:14.085+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#confirmOrder(Long)
2025-06-28T04:33:14.093+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:33:14.129+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : PATCH "/api/orders/12/confirm", parameters={}
2025-06-28T04:33:14.130+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#confirmOrder(Long)
2025-06-28T04:33:14.139+07:00  INFO 18695 --- [demo] [nio-8080-exec-8] c.i.e.controller.OrderController         : PATCH /api/orders/12/confirm - Confirming order
2025-06-28T04:33:14.140+07:00  INFO 18695 --- [demo] [nio-8080-exec-8] c.itss.ecommerce.service.OrderService    : Confirming order: 12
2025-06-28T04:33:14.156+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    where
        oil1_0.order_id=?
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    where
        oil1_0.order_id=?
2025-06-28T04:33:14.157+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:33:14.164+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] c.i.ecommerce.service.AuditLogService    : Logging ORDER operation on Order with ID: 12 by user: null
2025-06-28T04:33:14.169+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    insert 
    into
        audit_log
        (action_name, action_type, entity_id, entity_type, note, recorded_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        audit_log
        (action_name, action_type, entity_id, entity_type, note, recorded_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-28T04:33:14.170+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T04:33:14.171+07:00  INFO 18695 --- [demo] [nio-8080-exec-8] c.itss.ecommerce.service.OrderService    : Order 12 confirmed successfully
2025-06-28T04:33:14.186+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    update
        order_item_list 
    set
        created_at=?,
        delivery_id=?,
        status=?,
        total_after_vat=?,
        total_before_vat=?,
        updated_at=?,
        vat_percentage=? 
    where
        order_id=?
Hibernate: 
    update
        order_item_list 
    set
        created_at=?,
        delivery_id=?,
        status=?,
        total_after_vat=?,
        total_before_vat=?,
        updated_at=?,
        vat_percentage=? 
    where
        order_id=?
2025-06-28T04:33:14.191+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:33:14.191+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:33:14.192+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:33:14.193+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:33:14.194+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Order confirmed successfully, data=OrderItemListDTO(orderId=12, to (truncated)...]
2025-06-28T04:33:14.194+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:33:15.129+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T04:33:15.129+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T04:33:15.130+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T04:33:15.130+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T04:33:15.131+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T04:33:15.137+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:33:15.137+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T04:33:15.138+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:33:15.173+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T04:33:15.174+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T04:33:15.175+07:00  INFO 18695 --- [demo] [nio-8080-exec-7] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T04:33:15.176+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T04:33:15.177+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T04:33:15.178+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:33:15.179+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:33:15.179+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T04:33:15.179+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T04:33:15.179+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T04:33:15.180+07:00  INFO 18695 --- [demo] [io-8080-exec-10] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T04:33:15.180+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T04:33:15.179+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:33:15.179+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T04:33:15.181+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T04:33:15.182+07:00  INFO 18695 --- [demo] [nio-8080-exec-2] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T04:33:15.182+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T04:33:15.183+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T04:33:15.185+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:33:15.185+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:33:15.186+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T04:33:15.186+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:33:15.187+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:33:15.186+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T04:33:15.188+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:33:15.188+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:33:15.189+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:33:15.190+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:33:15.191+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:33:15.195+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:33:15.195+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:33:15.196+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:33:15.197+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:33:15.198+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:33:15.199+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:33:15.208+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:33:15.214+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:33:15.215+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:33:15.216+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:33:15.217+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:33:15.217+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:33:15.218+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:33:15.219+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:33:15.220+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:33:15.220+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:33:15.221+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:33:15.222+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:33:15.223+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:33:15.224+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:33:15.225+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:33:15.225+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:33:15.227+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:33:15.227+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:33:15.228+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:33:15.230+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:33:15.239+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:33:15.241+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:33:15.241+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:33:15.242+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:33:15.243+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:33:15.245+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:33:15.246+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T04:33:15.261+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:40:05.999+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T04:40:06.001+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T04:40:06.002+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T04:40:06.002+07:00  INFO 18695 --- [demo] [nio-8080-exec-9] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T04:40:06.003+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T04:40:06.003+07:00  INFO 18695 --- [demo] [nio-8080-exec-5] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T04:40:06.006+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T04:40:06.007+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T04:40:06.008+07:00  INFO 18695 --- [demo] [nio-8080-exec-8] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T04:40:06.010+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T04:40:06.010+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T04:40:06.010+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T04:40:06.011+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T04:40:06.012+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T04:40:06.013+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T04:40:06.017+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:06.018+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:40:06.018+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:06.019+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T04:40:06.021+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:40:06.019+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:06.022+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:06.023+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:40:06.023+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T04:40:06.025+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:06.025+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:40:06.025+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:06.026+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:06.026+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:06.027+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:06.028+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:06.029+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:06.031+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:06.032+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:06.033+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:06.034+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:40:06.035+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:06.035+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:06.036+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:40:06.037+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:06.038+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T04:40:06.038+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T04:40:06.039+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T04:40:06.041+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T04:40:06.042+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T04:40:06.038+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:06.044+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:40:06.044+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T04:40:06.045+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:06.045+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:06.046+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:40:06.055+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:06.055+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:06.057+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:06.058+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:06.059+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:06.059+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:06.060+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:06.061+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:06.062+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:06.062+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:06.063+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:06.063+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:06.066+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:40:06.068+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:06.069+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:06.070+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:06.070+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:06.072+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:40:06.076+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T04:40:06.087+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:40:32.772+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T04:40:32.772+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T04:40:32.773+07:00  INFO 18695 --- [demo] [nio-8080-exec-2] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T04:40:32.773+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T04:40:32.774+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T04:40:32.777+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:40:32.777+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T04:40:32.777+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T04:40:32.778+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T04:40:32.778+07:00  INFO 18695 --- [demo] [io-8080-exec-10] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T04:40:32.779+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T04:40:32.779+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:40:32.780+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T04:40:32.780+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:32.781+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:32.782+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:32.783+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:32.786+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T04:40:32.788+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T04:40:32.789+07:00  INFO 18695 --- [demo] [nio-8080-exec-7] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T04:40:32.789+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T04:40:32.791+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T04:40:32.795+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:40:32.796+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:32.797+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:32.797+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:32.798+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:32.798+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:32.799+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:40:32.799+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:32.799+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:32.800+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:32.800+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:40:32.801+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:32.801+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T04:40:32.802+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T04:40:32.803+07:00  INFO 18695 --- [demo] [nio-8080-exec-6] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T04:40:32.803+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:32.803+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T04:40:32.804+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:40:32.804+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T04:40:32.805+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:32.805+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:40:32.805+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T04:40:32.806+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:40:32.809+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:32.809+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:40:32.811+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:32.811+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:32.812+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:32.813+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:32.813+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:32.814+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:32.815+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:32.815+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:32.816+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:32.817+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:32.819+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:32.819+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:32.820+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:32.821+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:32.822+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:32.822+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:32.823+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:40:32.824+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:32.824+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:32.825+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:40:32.826+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:40:32.827+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:40:32.829+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T04:40:32.838+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:41:20.959+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T04:41:20.961+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T04:41:20.962+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T04:41:20.962+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T04:41:20.962+07:00  INFO 18695 --- [demo] [nio-8080-exec-4] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T04:41:20.963+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T04:41:20.963+07:00  INFO 18695 --- [demo] [nio-8080-exec-3] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T04:41:20.965+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T04:41:20.967+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T04:41:20.968+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T04:41:20.970+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:20.971+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T04:41:20.972+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T04:41:20.972+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:20.973+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:20.973+07:00  INFO 18695 --- [demo] [nio-8080-exec-8] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:20.973+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T04:41:20.973+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:20.974+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:20.974+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:20.974+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:20.977+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:20.980+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:41:20.980+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T04:41:20.981+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:20.981+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:41:20.982+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:20.983+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:20.984+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:20.985+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:20.985+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:20.986+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:20.986+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:41:21.000+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T04:41:21.000+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T04:41:21.001+07:00  INFO 18695 --- [demo] [nio-8080-exec-9] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T04:41:21.002+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T04:41:21.003+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T04:41:21.006+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:41:21.006+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T04:41:21.006+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:41:21.006+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T04:41:21.007+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:41:21.007+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:41:21.008+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:21.010+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:21.011+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:41:21.012+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:21.012+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:21.013+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:21.014+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:21.014+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:21.015+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:21.016+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:21.017+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:21.018+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:21.018+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:21.019+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:21.020+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:21.021+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:21.022+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:21.023+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:21.024+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:21.025+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:41:21.026+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:21.027+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:21.028+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:21.030+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:21.031+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:41:21.044+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T04:41:21.057+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:41:32.513+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T04:41:32.513+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T04:41:32.514+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T04:41:32.515+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T04:41:32.516+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T04:41:32.517+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T04:41:32.517+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T04:41:32.518+07:00  INFO 18695 --- [demo] [nio-8080-exec-5] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T04:41:32.518+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T04:41:32.519+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T04:41:32.520+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:41:32.520+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T04:41:32.522+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:41:32.524+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:32.526+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:32.527+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T04:41:32.527+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T04:41:32.528+07:00  INFO 18695 --- [demo] [nio-8080-exec-2] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T04:41:32.529+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T04:41:32.530+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:32.531+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:32.532+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:32.532+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T04:41:32.532+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T04:41:32.533+07:00  INFO 18695 --- [demo] [nio-8080-exec-7] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T04:41:32.534+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T04:41:32.534+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T04:41:32.536+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T04:41:32.538+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:41:32.538+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T04:41:32.539+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:41:32.541+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:32.542+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:41:32.544+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T04:41:32.546+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:41:32.550+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:32.554+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:32.555+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:32.557+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:32.558+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:32.559+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:41:32.560+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:32.561+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:32.561+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:41:32.562+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:32.563+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:32.563+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:41:32.564+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:32.565+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:32.566+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:32.567+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:32.568+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:32.568+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:32.569+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:32.570+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:32.573+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:32.581+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:32.582+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:32.583+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:32.583+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:32.583+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:32.584+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:32.584+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:32.585+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:41:32.586+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:32.586+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:32.587+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:41:32.588+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:41:32.589+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:41:32.591+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T04:41:32.608+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:48:46.088+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T04:48:46.089+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T04:48:46.088+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T04:48:46.089+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T04:48:46.088+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T04:48:46.090+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T04:48:46.089+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T04:48:46.091+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T04:48:46.118+07:00  INFO 18695 --- [demo] [nio-8080-exec-9] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T04:48:46.120+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T04:48:46.120+07:00  INFO 18695 --- [demo] [nio-8080-exec-4] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T04:48:46.122+07:00  INFO 18695 --- [demo] [nio-8080-exec-3] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T04:48:46.128+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T04:48:46.128+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T04:48:46.129+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T04:48:46.130+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T04:48:46.131+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T04:48:46.128+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T04:48:46.134+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T04:48:46.135+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T04:48:46.143+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:48:46.144+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:48:46.145+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:48:46.145+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:48:46.146+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:48:46.147+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:48:46.148+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T04:48:46.148+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:48:46.151+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:48:46.152+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:48:46.152+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:48:46.153+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:48:46.153+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:48:46.153+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:48:46.153+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T04:48:46.153+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T04:48:46.153+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:48:46.154+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:48:46.155+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:48:46.155+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:48:46.156+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:48:46.157+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:48:46.158+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:48:46.159+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:48:46.159+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:48:46.162+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:48:46.163+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:48:46.164+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:48:46.168+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:48:46.169+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:48:46.170+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:48:46.179+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:48:46.180+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:48:46.180+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:48:46.182+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:48:46.183+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:48:46.184+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:48:46.185+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:48:46.186+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:48:46.187+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:48:46.187+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:48:46.191+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:48:46.192+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:48:46.193+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:48:46.194+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:48:46.197+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:48:46.198+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:48:46.199+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:48:46.201+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:48:46.204+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T04:48:46.209+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:50:35.904+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : GET "/api/orders/customer/admin@itss.com", parameters={}
2025-06-28T04:50:35.905+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getOrdersByCustomerEmail(String)
2025-06-28T04:50:35.912+07:00  INFO 18695 --- [demo] [nio-8080-exec-6] c.i.e.controller.OrderController         : GET /api/orders/customer/admin@itss.com - Fetching orders
2025-06-28T04:50:35.913+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] c.itss.ecommerce.service.OrderService    : Fetching orders for customer: admin@itss.com
2025-06-28T04:50:35.925+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    join
        delivery_information di1_0 
            on di1_0.delivery_id=oil1_0.delivery_id 
    where
        di1_0.email=?
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    join
        delivery_information di1_0 
            on di1_0.delivery_id=oil1_0.delivery_id 
    where
        di1_0.email=?
2025-06-28T04:50:35.927+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:50:35.927+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 0 orders for customer admin@itss.com, data=[], errorCode (truncated)...]
2025-06-28T04:50:35.939+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:50:44.384+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T04:50:44.384+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T04:50:44.385+07:00  INFO 18695 --- [demo] [nio-8080-exec-8] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T04:50:44.385+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T04:50:44.387+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T04:50:44.389+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:50:44.390+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T04:50:44.391+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:54:41.953+07:00  INFO 18695 --- [demo] [   File Watcher] rtingClassPathChangeChangedEventListener : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-06-28T04:54:41.969+07:00  INFO 18695 --- [demo] [      Thread-37] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete
2025-06-28T04:54:41.975+07:00  INFO 18695 --- [demo] [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown complete
2025-06-28T04:54:41.993+07:00  INFO 18695 --- [demo] [      Thread-37] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:54:41.996+07:00  INFO 18695 --- [demo] [      Thread-37] com.zaxxer.hikari.HikariDataSource       : HikariPool-10 - Shutdown initiated...
2025-06-28T04:54:42.017+07:00  INFO 18695 --- [demo] [      Thread-37] com.zaxxer.hikari.HikariDataSource       : HikariPool-10 - Shutdown completed.

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.4)

2025-06-28T04:54:42.337+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Starting EcommerceApplication using Java 21.0.6 with PID 18695 (/home/bxs/AIMSspringboot-react/target/classes started by bxs in /home/bxs/AIMSspringboot-react)
2025-06-28T04:54:42.337+07:00 DEBUG 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Running with Spring Boot v3.4.4, Spring v6.2.5
2025-06-28T04:54:42.337+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : No active profile set, falling back to 1 default profile: "default"
2025-06-28T04:54:42.715+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-28T04:54:42.715+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-28T04:54:42.754+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 35 ms. Found 12 JPA repository interfaces.
2025-06-28T04:54:43.070+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-28T04:54:43.073+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-28T04:54:43.073+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-06-28T04:54:43.246+07:00  INFO 18695 --- [demo] [  restartedMain] org.apache.jasper.servlet.TldScanner     : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2025-06-28T04:54:43.248+07:00  INFO 18695 --- [demo] [  restartedMain] o.a.c.c.C.[Tomcat-3].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2025-06-28T04:54:43.248+07:00  INFO 18695 --- [demo] [  restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 908 ms
2025-06-28T04:54:43.319+07:00  INFO 18695 --- [demo] [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-28T04:54:43.324+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-28T04:54:43.346+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-28T04:54:43.349+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-11 - Starting...
2025-06-28T04:54:43.355+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-11 - Added connection org.sqlite.jdbc4.JDBC4Connection@8e1b16f
2025-06-28T04:54:43.355+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-11 - Start completed.
2025-06-28T04:54:43.356+07:00  INFO 18695 --- [demo] [  restartedMain] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-11)']
	Database driver: undefined/unknown
	Database version: 3.47.2
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-28T04:54:43.877+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
Hibernate: 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
2025-06-28T04:54:43.881+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:54:43.882+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:54:43.883+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:54:43.884+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:54:43.884+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:54:43.905+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-28T04:54:43.916+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
Hibernate: 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
2025-06-28T04:54:43.917+07:00  INFO 18695 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:54:44.400+07:00  WARN 18695 --- [demo] [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-28T04:54:44.407+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2025-06-28T04:54:44.436+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : 77 mappings in 'requestMappingHandlerMapping'
2025-06-28T04:54:44.481+07:00 DEBUG 18695 --- [demo] [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-28T04:54:44.490+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-28T04:54:44.499+07:00 DEBUG 18695 --- [demo] [  restartedMain] .m.m.a.ExceptionHandlerExceptionResolver : ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-28T04:54:44.529+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:sqlite:./data/ITSS_demo2.db'
2025-06-28T04:54:44.543+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2025-06-28T04:54:44.556+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-06-28T04:54:44.571+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Started EcommerceApplication in 2.341 seconds (process running for 7561.776)
2025-06-28T04:54:44.572+07:00  INFO 18695 --- [demo] [  restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2025-06-28T04:55:13.091+07:00  INFO 18695 --- [demo] [   File Watcher] rtingClassPathChangeChangedEventListener : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-06-28T04:55:13.093+07:00  INFO 18695 --- [demo] [      Thread-41] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete
2025-06-28T04:55:13.095+07:00  INFO 18695 --- [demo] [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown complete
2025-06-28T04:55:13.098+07:00  INFO 18695 --- [demo] [      Thread-41] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:55:13.099+07:00  INFO 18695 --- [demo] [      Thread-41] com.zaxxer.hikari.HikariDataSource       : HikariPool-11 - Shutdown initiated...
2025-06-28T04:55:13.100+07:00  INFO 18695 --- [demo] [      Thread-41] com.zaxxer.hikari.HikariDataSource       : HikariPool-11 - Shutdown completed.

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.4)

2025-06-28T04:55:13.239+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Starting EcommerceApplication using Java 21.0.6 with PID 18695 (/home/bxs/AIMSspringboot-react/target/classes started by bxs in /home/bxs/AIMSspringboot-react)
2025-06-28T04:55:13.239+07:00 DEBUG 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Running with Spring Boot v3.4.4, Spring v6.2.5
2025-06-28T04:55:13.239+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : No active profile set, falling back to 1 default profile: "default"
2025-06-28T04:55:13.392+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-28T04:55:13.392+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-28T04:55:13.425+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 31 ms. Found 12 JPA repository interfaces.
2025-06-28T04:55:13.622+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-28T04:55:13.622+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-28T04:55:13.623+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-06-28T04:55:13.713+07:00  INFO 18695 --- [demo] [  restartedMain] org.apache.jasper.servlet.TldScanner     : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2025-06-28T04:55:13.716+07:00  INFO 18695 --- [demo] [  restartedMain] o.a.c.c.C.[Tomcat-3].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2025-06-28T04:55:13.716+07:00  INFO 18695 --- [demo] [  restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 474 ms
2025-06-28T04:55:13.771+07:00  INFO 18695 --- [demo] [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-28T04:55:13.774+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-28T04:55:13.786+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-28T04:55:13.788+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-12 - Starting...
2025-06-28T04:55:13.789+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-12 - Added connection org.sqlite.jdbc4.JDBC4Connection@4561a96e
2025-06-28T04:55:13.790+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-12 - Start completed.
2025-06-28T04:55:13.790+07:00  INFO 18695 --- [demo] [  restartedMain] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-12)']
	Database driver: undefined/unknown
	Database version: 3.47.2
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-28T04:55:14.114+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
Hibernate: 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
2025-06-28T04:55:14.117+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:55:14.118+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:55:14.118+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:55:14.119+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:55:14.119+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:55:14.140+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-28T04:55:14.149+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
Hibernate: 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
2025-06-28T04:55:14.149+07:00  INFO 18695 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:55:14.517+07:00  WARN 18695 --- [demo] [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-28T04:55:14.523+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2025-06-28T04:55:14.547+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : 77 mappings in 'requestMappingHandlerMapping'
2025-06-28T04:55:14.575+07:00 DEBUG 18695 --- [demo] [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-28T04:55:14.585+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-28T04:55:14.594+07:00 DEBUG 18695 --- [demo] [  restartedMain] .m.m.a.ExceptionHandlerExceptionResolver : ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-28T04:55:14.627+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:sqlite:./data/ITSS_demo2.db'
2025-06-28T04:55:14.643+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2025-06-28T04:55:14.654+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-06-28T04:55:14.658+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Started EcommerceApplication in 1.451 seconds (process running for 7591.863)
2025-06-28T04:55:14.659+07:00  INFO 18695 --- [demo] [  restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2025-06-28T04:56:10.349+07:00  INFO 18695 --- [demo] [   File Watcher] rtingClassPathChangeChangedEventListener : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-06-28T04:56:10.354+07:00  INFO 18695 --- [demo] [      Thread-45] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete
2025-06-28T04:56:10.356+07:00  INFO 18695 --- [demo] [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown complete
2025-06-28T04:56:10.359+07:00  INFO 18695 --- [demo] [      Thread-45] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:56:10.359+07:00  INFO 18695 --- [demo] [      Thread-45] com.zaxxer.hikari.HikariDataSource       : HikariPool-12 - Shutdown initiated...
2025-06-28T04:56:10.361+07:00  INFO 18695 --- [demo] [      Thread-45] com.zaxxer.hikari.HikariDataSource       : HikariPool-12 - Shutdown completed.

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.4)

2025-06-28T04:56:10.689+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Starting EcommerceApplication using Java 21.0.6 with PID 18695 (/home/bxs/AIMSspringboot-react/target/classes started by bxs in /home/bxs/AIMSspringboot-react)
2025-06-28T04:56:10.689+07:00 DEBUG 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Running with Spring Boot v3.4.4, Spring v6.2.5
2025-06-28T04:56:10.689+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : No active profile set, falling back to 1 default profile: "default"
2025-06-28T04:56:10.872+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-28T04:56:10.873+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-28T04:56:10.899+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 25 ms. Found 12 JPA repository interfaces.
2025-06-28T04:56:11.077+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-28T04:56:11.078+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-28T04:56:11.078+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-06-28T04:56:11.147+07:00  INFO 18695 --- [demo] [  restartedMain] org.apache.jasper.servlet.TldScanner     : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2025-06-28T04:56:11.149+07:00  INFO 18695 --- [demo] [  restartedMain] o.a.c.c.C.[Tomcat-3].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2025-06-28T04:56:11.149+07:00  INFO 18695 --- [demo] [  restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 458 ms
2025-06-28T04:56:11.198+07:00  INFO 18695 --- [demo] [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-28T04:56:11.200+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-28T04:56:11.210+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-28T04:56:11.212+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-13 - Starting...
2025-06-28T04:56:11.212+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-13 - Added connection org.sqlite.jdbc4.JDBC4Connection@947c294
2025-06-28T04:56:11.212+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-13 - Start completed.
2025-06-28T04:56:11.213+07:00  INFO 18695 --- [demo] [  restartedMain] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-13)']
	Database driver: undefined/unknown
	Database version: 3.47.2
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-28T04:56:11.541+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
Hibernate: 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
2025-06-28T04:56:11.543+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:56:11.543+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:56:11.544+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:56:11.545+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:56:11.545+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:56:11.565+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-28T04:56:11.573+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
Hibernate: 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
2025-06-28T04:56:11.573+07:00  INFO 18695 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:56:11.973+07:00  WARN 18695 --- [demo] [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-28T04:56:11.981+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2025-06-28T04:56:12.004+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : 77 mappings in 'requestMappingHandlerMapping'
2025-06-28T04:56:12.035+07:00 DEBUG 18695 --- [demo] [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-28T04:56:12.043+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-28T04:56:12.049+07:00 DEBUG 18695 --- [demo] [  restartedMain] .m.m.a.ExceptionHandlerExceptionResolver : ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-28T04:56:12.075+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:sqlite:./data/ITSS_demo2.db'
2025-06-28T04:56:12.083+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2025-06-28T04:56:12.092+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-06-28T04:56:12.097+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Started EcommerceApplication in 1.459 seconds (process running for 7649.302)
2025-06-28T04:56:12.098+07:00  INFO 18695 --- [demo] [  restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2025-06-28T04:56:47.750+07:00  INFO 18695 --- [demo] [   File Watcher] rtingClassPathChangeChangedEventListener : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-06-28T04:56:47.752+07:00  INFO 18695 --- [demo] [      Thread-49] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete
2025-06-28T04:56:47.755+07:00  INFO 18695 --- [demo] [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown complete
2025-06-28T04:56:47.758+07:00  INFO 18695 --- [demo] [      Thread-49] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:56:47.759+07:00  INFO 18695 --- [demo] [      Thread-49] com.zaxxer.hikari.HikariDataSource       : HikariPool-13 - Shutdown initiated...
2025-06-28T04:56:47.761+07:00  INFO 18695 --- [demo] [      Thread-49] com.zaxxer.hikari.HikariDataSource       : HikariPool-13 - Shutdown completed.

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.4)

2025-06-28T04:56:47.937+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Starting EcommerceApplication using Java 21.0.6 with PID 18695 (/home/bxs/AIMSspringboot-react/target/classes started by bxs in /home/bxs/AIMSspringboot-react)
2025-06-28T04:56:47.937+07:00 DEBUG 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Running with Spring Boot v3.4.4, Spring v6.2.5
2025-06-28T04:56:47.938+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : No active profile set, falling back to 1 default profile: "default"
2025-06-28T04:56:48.085+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-28T04:56:48.085+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-28T04:56:48.111+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 23 ms. Found 12 JPA repository interfaces.
2025-06-28T04:56:48.287+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-28T04:56:48.288+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-28T04:56:48.288+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-06-28T04:56:48.372+07:00  INFO 18695 --- [demo] [  restartedMain] org.apache.jasper.servlet.TldScanner     : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2025-06-28T04:56:48.374+07:00  INFO 18695 --- [demo] [  restartedMain] o.a.c.c.C.[Tomcat-3].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2025-06-28T04:56:48.374+07:00  INFO 18695 --- [demo] [  restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 433 ms
2025-06-28T04:56:48.417+07:00  INFO 18695 --- [demo] [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-28T04:56:48.424+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-28T04:56:48.432+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-28T04:56:48.434+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-14 - Starting...
2025-06-28T04:56:48.435+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-14 - Added connection org.sqlite.jdbc4.JDBC4Connection@18ff106e
2025-06-28T04:56:48.435+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-14 - Start completed.
2025-06-28T04:56:48.436+07:00  INFO 18695 --- [demo] [  restartedMain] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-14)']
	Database driver: undefined/unknown
	Database version: 3.47.2
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-28T04:56:48.826+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
Hibernate: 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
2025-06-28T04:56:48.828+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:56:48.830+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:56:48.830+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:56:48.831+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:56:48.832+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:56:48.852+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-28T04:56:48.863+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
Hibernate: 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
2025-06-28T04:56:48.864+07:00  INFO 18695 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:56:49.250+07:00  WARN 18695 --- [demo] [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-28T04:56:49.256+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2025-06-28T04:56:49.280+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : 77 mappings in 'requestMappingHandlerMapping'
2025-06-28T04:56:49.305+07:00 DEBUG 18695 --- [demo] [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-28T04:56:49.315+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-28T04:56:49.326+07:00 DEBUG 18695 --- [demo] [  restartedMain] .m.m.a.ExceptionHandlerExceptionResolver : ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-28T04:56:49.344+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:sqlite:./data/ITSS_demo2.db'
2025-06-28T04:56:49.352+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2025-06-28T04:56:49.371+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-06-28T04:56:49.374+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Started EcommerceApplication in 1.474 seconds (process running for 7686.579)
2025-06-28T04:56:49.375+07:00  INFO 18695 --- [demo] [  restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2025-06-28T04:58:05.228+07:00  INFO 18695 --- [demo] [   File Watcher] rtingClassPathChangeChangedEventListener : Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-06-28T04:58:05.230+07:00  INFO 18695 --- [demo] [      Thread-53] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete
2025-06-28T04:58:05.231+07:00  INFO 18695 --- [demo] [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown complete
2025-06-28T04:58:05.234+07:00  INFO 18695 --- [demo] [      Thread-53] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:58:05.235+07:00  INFO 18695 --- [demo] [      Thread-53] com.zaxxer.hikari.HikariDataSource       : HikariPool-14 - Shutdown initiated...
2025-06-28T04:58:05.236+07:00  INFO 18695 --- [demo] [      Thread-53] com.zaxxer.hikari.HikariDataSource       : HikariPool-14 - Shutdown completed.

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.4)

2025-06-28T04:58:05.434+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Starting EcommerceApplication using Java 21.0.6 with PID 18695 (/home/bxs/AIMSspringboot-react/target/classes started by bxs in /home/bxs/AIMSspringboot-react)
2025-06-28T04:58:05.434+07:00 DEBUG 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Running with Spring Boot v3.4.4, Spring v6.2.5
2025-06-28T04:58:05.435+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : No active profile set, falling back to 1 default profile: "default"
2025-06-28T04:58:05.624+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-28T04:58:05.624+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-28T04:58:05.647+07:00  INFO 18695 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 22 ms. Found 12 JPA repository interfaces.
2025-06-28T04:58:05.811+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-28T04:58:05.811+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-28T04:58:05.811+07:00  INFO 18695 --- [demo] [  restartedMain] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-06-28T04:58:05.878+07:00  INFO 18695 --- [demo] [  restartedMain] org.apache.jasper.servlet.TldScanner     : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2025-06-28T04:58:05.880+07:00  INFO 18695 --- [demo] [  restartedMain] o.a.c.c.C.[Tomcat-3].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2025-06-28T04:58:05.880+07:00  INFO 18695 --- [demo] [  restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 443 ms
2025-06-28T04:58:05.928+07:00  INFO 18695 --- [demo] [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-28T04:58:05.930+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-28T04:58:05.937+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-28T04:58:05.939+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-15 - Starting...
2025-06-28T04:58:05.939+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-15 - Added connection org.sqlite.jdbc4.JDBC4Connection@3fa76223
2025-06-28T04:58:05.939+07:00  INFO 18695 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-15 - Start completed.
2025-06-28T04:58:05.940+07:00  INFO 18695 --- [demo] [  restartedMain] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-15)']
	Database driver: undefined/unknown
	Database version: 3.47.2
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-28T04:58:06.208+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
Hibernate: 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
2025-06-28T04:58:06.211+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:58:06.211+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:58:06.212+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:58:06.213+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:58:06.213+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T04:58:06.229+07:00  INFO 18695 --- [demo] [  restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-28T04:58:06.239+07:00 DEBUG 18695 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
Hibernate: 
    alter table daily_operation_tracker 
       drop constraint UKenk1xmd0sbhl6des3w1npxred
2025-06-28T04:58:06.240+07:00  INFO 18695 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T04:58:06.610+07:00  WARN 18695 --- [demo] [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-28T04:58:06.618+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2025-06-28T04:58:06.640+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : 79 mappings in 'requestMappingHandlerMapping'
2025-06-28T04:58:06.667+07:00 DEBUG 18695 --- [demo] [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-28T04:58:06.674+07:00 DEBUG 18695 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-28T04:58:06.687+07:00 DEBUG 18695 --- [demo] [  restartedMain] .m.m.a.ExceptionHandlerExceptionResolver : ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-28T04:58:06.706+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:sqlite:./data/ITSS_demo2.db'
2025-06-28T04:58:06.715+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2025-06-28T04:58:06.733+07:00  INFO 18695 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-06-28T04:58:06.735+07:00  INFO 18695 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Started EcommerceApplication in 1.335 seconds (process running for 7763.94)
2025-06-28T04:58:06.736+07:00  INFO 18695 --- [demo] [  restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2025-06-28T04:59:31.832+07:00  INFO 18695 --- [demo] [nio-8080-exec-4] o.a.c.c.C.[Tomcat-3].[localhost].[/]     : Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-28T04:59:31.834+07:00  INFO 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2025-06-28T04:59:31.834+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Detected StandardServletMultipartResolver
2025-06-28T04:59:31.834+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Detected AcceptHeaderLocaleResolver
2025-06-28T04:59:31.834+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Detected FixedThemeResolver
2025-06-28T04:59:31.836+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@5657c893
2025-06-28T04:59:31.836+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Detected org.springframework.web.servlet.support.SessionFlashMapManager@4c1753b3
2025-06-28T04:59:31.836+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-06-28T04:59:31.836+07:00  INFO 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2025-06-28T04:59:31.837+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T04:59:31.838+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T04:59:31.838+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T04:59:31.838+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T04:59:31.839+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T04:59:31.839+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T04:59:31.839+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T04:59:31.840+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T04:59:31.855+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T04:59:31.859+07:00  INFO 18695 --- [demo] [nio-8080-exec-4] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T04:59:31.856+07:00  INFO 18695 --- [demo] [nio-8080-exec-2] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T04:59:31.859+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T04:59:31.860+07:00  INFO 18695 --- [demo] [nio-8080-exec-3] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T04:59:31.860+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T04:59:31.860+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T04:59:31.860+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T04:59:31.862+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T04:59:31.863+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T04:59:31.863+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T04:59:31.864+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T04:59:31.870+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:59:31.873+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:59:31.876+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:59:31.887+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:59:31.889+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:59:31.890+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:59:31.893+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:59:31.893+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:59:31.894+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:59:31.895+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T04:59:31.898+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:59:31.899+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T04:59:31.900+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T04:59:31.901+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:59:31.904+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:59:31.905+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:59:31.905+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:59:31.908+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:59:31.910+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T04:59:31.913+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:59:31.913+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:59:31.916+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:59:31.920+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:59:31.923+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:59:31.923+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T04:59:31.925+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:59:31.926+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:59:31.927+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:59:31.928+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:59:31.929+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:59:31.930+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:59:31.932+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:59:31.933+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:59:31.934+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:59:31.935+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:59:31.936+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:59:31.938+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:59:31.939+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:59:31.940+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:59:31.941+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:59:31.942+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:59:31.943+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:59:31.944+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:59:31.945+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T04:59:31.946+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:59:31.947+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:59:31.949+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T04:59:31.950+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T04:59:31.953+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T04:59:31.971+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T04:59:32.001+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T05:07:06.465+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T05:07:06.467+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T05:07:06.466+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : GET "/api/orders", parameters={}
2025-06-28T05:07:06.469+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getAllOrders()
2025-06-28T05:07:06.474+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : GET "/api/users", parameters={}
2025-06-28T05:07:06.475+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.UserController#getAllUsers()
2025-06-28T05:07:06.476+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : GET "/api/products/low-stock?threshold=10", parameters={masked}
2025-06-28T05:07:06.476+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getLowStockProducts(int)
2025-06-28T05:07:06.479+07:00  INFO 18695 --- [demo] [io-8080-exec-10] c.i.e.controller.OrderController         : GET /api/orders - Fetching all orders
2025-06-28T05:07:06.482+07:00  INFO 18695 --- [demo] [nio-8080-exec-3] c.i.e.controller.ProductController       : GET /api/products/low-stock - Fetching products with stock below 10
2025-06-28T05:07:06.484+07:00  INFO 18695 --- [demo] [nio-8080-exec-9] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T05:07:06.489+07:00  INFO 18695 --- [demo] [nio-8080-exec-2] c.i.ecommerce.controller.UserController  : GET /api/users - Fetching all users
2025-06-28T05:07:06.493+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] c.itss.ecommerce.service.ProductService  : Fetching products with stock below: 10
2025-06-28T05:07:06.493+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] com.itss.ecommerce.service.UserService   : Fetching all users
2025-06-28T05:07:06.493+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.quantity<?
2025-06-28T05:07:06.495+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
Hibernate: 
    select
        u1_0.user_id,
        u1_0.email,
        u1_0.is_active,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        u1_0.role,
        u1_0.salary 
    from
        user u1_0
2025-06-28T05:07:06.495+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] c.itss.ecommerce.service.OrderService    : Fetching all orders
2025-06-28T05:07:06.494+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T05:07:06.496+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    order by
        oil1_0.created_at desc
2025-06-28T05:07:06.497+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T05:07:06.498+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T05:07:06.498+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Found 0 products with low stock, data=[], errorCode=null, timestam (truncated)...]
2025-06-28T05:07:06.503+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T05:07:06.511+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T05:07:06.512+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T05:07:06.513+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T05:07:06.514+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T05:07:06.515+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 3 users, data=[UserDTO(userId=1, name=Admin User, email= (truncated)...]
2025-06-28T05:07:06.522+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T05:07:06.523+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T05:07:06.530+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T05:07:06.531+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T05:07:06.531+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T05:07:06.533+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T05:07:06.535+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T05:07:06.539+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T05:07:06.553+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T05:07:06.570+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T05:07:06.571+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T05:07:06.572+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T05:07:06.573+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
Hibernate: 
    select
        i1_0.invoice_id,
        i1_0.created_at,
        i1_0.description,
        i1_0.order_id,
        i1_0.paid_at,
        i1_0.payment_method,
        i1_0.payment_status,
        i1_0.transaction_id 
    from
        invoice i1_0 
    where
        i1_0.order_id=?
2025-06-28T05:07:06.574+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T05:07:06.575+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T05:07:06.576+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T05:07:06.578+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T05:07:06.579+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T05:07:06.586+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T05:07:06.588+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T05:07:06.589+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T05:07:06.590+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T05:07:06.594+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T05:07:06.596+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T05:07:06.597+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T05:07:06.599+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T05:07:06.600+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T05:07:06.601+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T05:07:06.602+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T05:07:06.604+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T05:07:06.605+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T05:07:06.606+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T05:07:06.607+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T05:07:06.608+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T05:07:06.609+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T05:07:06.611+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T05:07:06.613+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T05:07:06.614+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T05:07:06.615+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
Hibernate: 
    select
        di1_0.delivery_id,
        di1_0.address,
        di1_0.delivery_fee,
        di1_0.delivery_message,
        di1_0.district,
        di1_0.email,
        di1_0.name,
        di1_0.phone,
        di1_0.province,
        di1_0.ward 
    from
        delivery_information di1_0 
    where
        di1_0.delivery_id=?
2025-06-28T05:07:06.616+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
Hibernate: 
    select
        oi1_0.order_id,
        oi1_0.order_item_id,
        oi1_0.delivery_time,
        oi1_0.instructions,
        oi1_0.product_id,
        oi1_0.quantity,
        oi1_0.rush_order_using,
        oi1_0.status,
        oi1_0.total_fee 
    from
        order_item oi1_0 
    where
        oi1_0.order_id=?
2025-06-28T05:07:06.617+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T05:07:06.620+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 12 orders, data=[OrderItemListDTO(orderId=12, totalBefor (truncated)...]
2025-06-28T05:07:06.628+07:00 DEBUG 18695 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T05:07:07.790+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T05:07:07.791+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T05:07:07.791+07:00  INFO 18695 --- [demo] [nio-8080-exec-4] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T05:07:07.792+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T05:07:07.793+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T05:07:07.797+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T05:07:07.802+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T05:07:07.808+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T05:07:10.438+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T05:07:10.439+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T05:07:10.439+07:00  INFO 18695 --- [demo] [nio-8080-exec-1] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T05:07:10.440+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T05:07:10.441+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T05:07:10.443+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T05:07:10.444+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 10 products, data=[ProductDTO(productId=1, title=The Gre (truncated)...]
2025-06-28T05:07:10.445+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T05:07:45.906+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : GET "/api/orders/customer/admin@itss.com", parameters={}
2025-06-28T05:07:45.906+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#getOrdersByCustomerEmail(String)
2025-06-28T05:07:45.908+07:00  INFO 18695 --- [demo] [nio-8080-exec-6] c.i.e.controller.OrderController         : GET /api/orders/customer/admin@itss.com - Fetching orders
2025-06-28T05:07:45.909+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] c.itss.ecommerce.service.OrderService    : Fetching orders for customer: admin@itss.com
2025-06-28T05:07:45.911+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    join
        delivery_information di1_0 
            on di1_0.delivery_id=oil1_0.delivery_id 
    where
        di1_0.email=?
Hibernate: 
    select
        oil1_0.order_id,
        oil1_0.created_at,
        oil1_0.delivery_id,
        oil1_0.status,
        oil1_0.total_after_vat,
        oil1_0.total_before_vat,
        oil1_0.updated_at,
        oil1_0.vat_percentage 
    from
        order_item_list oil1_0 
    join
        delivery_information di1_0 
            on di1_0.delivery_id=oil1_0.delivery_id 
    where
        di1_0.email=?
2025-06-28T05:07:45.914+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T05:07:45.914+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 0 orders for customer admin@itss.com, data=[], errorCode (truncated)...]
2025-06-28T05:07:45.915+07:00 DEBUG 18695 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
