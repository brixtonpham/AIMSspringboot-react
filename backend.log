[INFO] Scanning for projects...
[INFO] 
[INFO] ---------------------< com.example:merged-project >---------------------
[INFO] Building merged-project 0.0.1-SNAPSHOT
[INFO]   from pom.xml
[INFO] --------------------------------[ war ]---------------------------------
[INFO] 
[INFO] >>> spring-boot:3.4.4:run (default-cli) > test-compile @ merged-project >>>
[INFO] 
[INFO] --- resources:3.3.1:resources (default-resources) @ merged-project ---
[INFO] Copying 1 resource from src/main/resources to target/classes
[INFO] Copying 5 resources from src/main/resources to target/classes
[INFO] 
[INFO] --- compiler:3.13.0:compile (default-compile) @ merged-project ---
[INFO] Nothing to compile - all classes are up to date.
[INFO] 
[INFO] --- resources:3.3.1:testResources (default-testResources) @ merged-project ---
[INFO] Copying 1 resource from src/test/resources to target/test-classes
[INFO] 
[INFO] --- compiler:3.13.0:testCompile (default-testCompile) @ merged-project ---
[INFO] Recompiling the module because of changed source code.
[INFO] Compiling 10 source files with javac [debug parameters release 21] to target/test-classes
[INFO] 
[INFO] <<< spring-boot:3.4.4:run (default-cli) < test-compile @ merged-project <<<
[INFO] 
[INFO] 
[INFO] --- spring-boot:3.4.4:run (default-cli) @ merged-project ---
[INFO] Attaching agents: []

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.4)

2025-06-28T22:31:56.686+07:00  INFO 74202 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Starting EcommerceApplication using Java 21.0.2 with PID 74202 (/Users/namu10x/workspace/aimsxuanson/AIMSspringboot-react/target/classes started by namu10x in /Users/namu10x/workspace/aimsxuanson/AIMSspringboot-react)
2025-06-28T22:31:56.687+07:00 DEBUG 74202 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Running with Spring Boot v3.4.4, Spring v6.2.5
2025-06-28T22:31:56.687+07:00  INFO 74202 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : No active profile set, falling back to 1 default profile: "default"
2025-06-28T22:31:56.707+07:00  INFO 74202 --- [demo] [  restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-28T22:31:56.707+07:00  INFO 74202 --- [demo] [  restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-28T22:31:56.940+07:00  INFO 74202 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-28T22:31:56.940+07:00  INFO 74202 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-28T22:31:56.972+07:00  INFO 74202 --- [demo] [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 28 ms. Found 12 JPA repository interfaces.
2025-06-28T22:31:57.358+07:00  INFO 74202 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-28T22:31:57.366+07:00  INFO 74202 --- [demo] [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-28T22:31:57.366+07:00  INFO 74202 --- [demo] [  restartedMain] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-06-28T22:31:57.455+07:00  INFO 74202 --- [demo] [  restartedMain] org.apache.jasper.servlet.TldScanner     : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2025-06-28T22:31:57.458+07:00  INFO 74202 --- [demo] [  restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-06-28T22:31:57.458+07:00  INFO 74202 --- [demo] [  restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 751 ms
2025-06-28T22:31:57.540+07:00  INFO 74202 --- [demo] [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-28T22:31:57.563+07:00  INFO 74202 --- [demo] [  restartedMain] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.6.11.Final
2025-06-28T22:31:57.576+07:00  INFO 74202 --- [demo] [  restartedMain] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-28T22:31:57.691+07:00  INFO 74202 --- [demo] [  restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-28T22:31:57.704+07:00  INFO 74202 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-06-28T22:31:57.943+07:00  INFO 74202 --- [demo] [  restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection org.sqlite.jdbc4.JDBC4Connection@2949549
2025-06-28T22:31:57.945+07:00  INFO 74202 --- [demo] [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-06-28T22:31:57.963+07:00  INFO 74202 --- [demo] [  restartedMain] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 3.47.2
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-28T22:31:58.497+07:00 DEBUG 74202 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
Hibernate: 
    create table HT_product(product_id bigint not null, hib_sess_id char(36) not null, primary key (product_id, hib_sess_id))
2025-06-28T22:31:58.501+07:00 DEBUG 74202 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_product(duration_minutes integer, page_count integer, price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), dvd_type varchar(50), genre varchar(100), genre varchar(100), genre varchar(100), publishers varchar(200), record_label varchar(200), studio varchar(200), artists varchar(500), authors varchar(500), directors varchar(500), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), publication_date varchar(255), record_label varchar(255), release_date varchar(255), release_date varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), track_list TEXT, tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T22:31:58.502+07:00 DEBUG 74202 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_dvd(duration_minutes integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, rating varchar(10), type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), dvd_type varchar(50), genre varchar(100), studio varchar(200), directors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T22:31:58.502+07:00 DEBUG 74202 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_book(page_count integer, price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), cover_type varchar(50), genre varchar(100), publishers varchar(200), authors varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, publication_date varchar(255), title varchar(255), type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T22:31:58.503+07:00 DEBUG 74202 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_lp(price integer, quantity integer, rpm integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, size_inches float, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), image_url varchar(500), artist varchar(255), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, music_type varchar(255), record_label varchar(255), release_date varchar(255), sleeve_condition varchar(255), title varchar(255), tracklist TEXT, type varchar(255), vinyl_condition varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T22:31:58.503+07:00 DEBUG 74202 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
Hibernate: 
    create table HTE_cd(price integer, quantity integer, rush_order_supported boolean, weight float, HTE_IDENTITY integer, created_at timestamp, product_id bigint, updated_at timestamp, type varchar(31) not null, hib_sess_id char(36) not null, barcode varchar(50), genre varchar(100), record_label varchar(200), artists varchar(500), image_url varchar(500), condition varchar(255), dimensions varchar(255), import_date varchar(255), introduction TEXT, release_date varchar(255), title varchar(255), track_list TEXT, type varchar(255), primary key (HTE_IDENTITY, hib_sess_id))
2025-06-28T22:31:58.576+07:00  INFO 74202 --- [demo] [  restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-28T22:31:58.596+07:00 DEBUG 74202 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    create table user (
        user_id integer,
        email varchar(255) not null unique,
        is_active boolean,
        name varchar(255) not null,
        password varchar(255) not null,
        phone varchar(20),
        registration_date timestamp,
        role varchar(255) check (role in ('ADMIN','MANAGER')),
        salary float,
        primary key (user_id)
    )
Hibernate: 
    create table user (
        user_id integer,
        email varchar(255) not null unique,
        is_active boolean,
        name varchar(255) not null,
        password varchar(255) not null,
        phone varchar(20),
        registration_date timestamp,
        role varchar(255) check (role in ('ADMIN','MANAGER')),
        salary float,
        primary key (user_id)
    )
2025-06-28T22:31:58.598+07:00 DEBUG 74202 --- [demo] [  restartedMain] org.hibernate.SQL                        : 
    alter table user 
       drop constraint UKob8kqyqqgmefl0aco34akdtpe
Hibernate: 
    alter table user 
       drop constraint UKob8kqyqqgmefl0aco34akdtpe
2025-06-28T22:31:58.598+07:00  INFO 74202 --- [demo] [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-28T22:31:58.706+07:00  INFO 74202 --- [demo] [  restartedMain] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-28T22:32:00.373+07:00  WARN 74202 --- [demo] [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-28T22:32:00.383+07:00  INFO 74202 --- [demo] [  restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2025-06-28T22:32:00.428+07:00 DEBUG 74202 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : 79 mappings in 'requestMappingHandlerMapping'
2025-06-28T22:32:00.479+07:00 DEBUG 74202 --- [demo] [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-28T22:32:00.495+07:00 DEBUG 74202 --- [demo] [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-28T22:32:00.519+07:00 DEBUG 74202 --- [demo] [  restartedMain] .m.m.a.ExceptionHandlerExceptionResolver : ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-28T22:32:00.563+07:00  INFO 74202 --- [demo] [  restartedMain] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:sqlite:./data/ITSS_demo2.db'
2025-06-28T22:32:00.588+07:00  INFO 74202 --- [demo] [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2025-06-28T22:32:00.608+07:00  INFO 74202 --- [demo] [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-06-28T22:32:00.614+07:00  INFO 74202 --- [demo] [  restartedMain] c.itss.ecommerce.EcommerceApplication    : Started EcommerceApplication in 4.096 seconds (process running for 4.274)
2025-06-28T22:32:01.561+07:00  INFO 74202 --- [demo] [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-28T22:32:01.561+07:00  INFO 74202 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2025-06-28T22:32:01.561+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected StandardServletMultipartResolver
2025-06-28T22:32:01.561+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected AcceptHeaderLocaleResolver
2025-06-28T22:32:01.561+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected FixedThemeResolver
2025-06-28T22:32:01.561+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@3f483987
2025-06-28T22:32:01.562+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Detected org.springframework.web.servlet.support.SessionFlashMapManager@29a1939
2025-06-28T22:32:01.562+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-06-28T22:32:01.562+07:00  INFO 74202 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2025-06-28T22:32:01.565+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T22:32:01.568+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T22:32:01.586+07:00  INFO 74202 --- [demo] [nio-8080-exec-1] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T22:32:01.588+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-1] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T22:32:01.619+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-1] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T22:32:01.657+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-28T22:32:01.662+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-1] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-28T22:32:01.676+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T22:32:09.203+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T22:32:09.204+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T22:32:09.209+07:00  INFO 74202 --- [demo] [nio-8080-exec-2] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T22:32:09.209+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-2] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T22:32:09.210+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T22:32:09.213+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T22:32:09.213+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-28T22:32:09.215+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T22:32:26.812+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : OPTIONS "/api/cart/check-quantities", parameters={}
2025-06-28T22:32:26.813+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-3] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.CartController#checkQuantities(CartCheckRequest)
2025-06-28T22:32:26.815+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T22:32:26.820+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : POST "/api/cart/check-quantities", parameters={}
2025-06-28T22:32:26.820+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.CartController#checkQuantities(CartCheckRequest)
2025-06-28T22:32:26.847+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] m.m.a.RequestResponseBodyMethodProcessor : Read "application/json;charset=UTF-8" to [CartCheckRequest(items=[CartCheckRequest.CartItem(productId=2, quantity=5), CartCheckRequest.CartIte (truncated)...]
2025-06-28T22:32:26.853+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T22:32:26.854+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T22:32:26.855+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T22:32:26.857+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] m.m.a.RequestResponseBodyMethodProcessor : Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-28T22:32:26.858+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] m.m.a.RequestResponseBodyMethodProcessor : Writing [CartCheckResponse(ok=true, insufficient=[])]
2025-06-28T22:32:26.858+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T22:32:54.585+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : OPTIONS "/api/orders", parameters={}
2025-06-28T22:32:54.586+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-5] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#createOrder(CreateOrderRequest)
2025-06-28T22:32:54.587+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T22:32:54.590+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : POST "/api/orders", parameters={}
2025-06-28T22:32:54.591+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#createOrder(CreateOrderRequest)
2025-06-28T22:32:54.602+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] m.m.a.RequestResponseBodyMethodProcessor : Read "application/json;charset=UTF-8" to [CreateOrderRequest(cartItems=[CreateOrderRequest.CartItemDTO(productId=2, quantity=5, rushOrder=true (truncated)...]
2025-06-28T22:32:54.637+07:00  INFO 74202 --- [demo] [nio-8080-exec-6] c.i.e.controller.OrderController         : POST /api/orders - Creating new order with 3 items
2025-06-28T22:32:54.638+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] c.itss.ecommerce.service.ProductService  : Fetching product by ID: 2
2025-06-28T22:32:54.638+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T22:32:54.639+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] c.itss.ecommerce.service.ProductService  : Fetching product by ID: 3
2025-06-28T22:32:54.639+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T22:32:54.640+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] c.itss.ecommerce.service.ProductService  : Fetching product by ID: 8
2025-06-28T22:32:54.640+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T22:32:54.640+07:00  INFO 74202 --- [demo] [nio-8080-exec-6] c.itss.ecommerce.service.OrderService    : Creating order with 3 items
2025-06-28T22:32:54.650+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    insert 
    into
        delivery_information
        (address, delivery_fee, delivery_message, district, email, name, phone, province, ward) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        delivery_information
        (address, delivery_fee, delivery_message, district, email, name, phone, province, ward) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-28T22:32:54.652+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T22:32:54.661+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    insert 
    into
        order_items
        (created_at, delivery_id, status, total_after_vat, total_before_vat, updated_at, vat_percentage) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        order_items
        (created_at, delivery_id, status, total_after_vat, total_before_vat, updated_at, vat_percentage) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-28T22:32:54.662+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T22:32:54.663+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    insert 
    into
        order_item
        (delivery_time, instructions, order_id, product_id, quantity, rush_order_using, status, total_fee) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        order_item
        (delivery_time, instructions, order_id, product_id, quantity, rush_order_using, status, total_fee) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-06-28T22:32:54.663+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T22:32:54.663+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    insert 
    into
        order_item
        (delivery_time, instructions, order_id, product_id, quantity, rush_order_using, status, total_fee) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        order_item
        (delivery_time, instructions, order_id, product_id, quantity, rush_order_using, status, total_fee) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-06-28T22:32:54.663+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T22:32:54.664+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    insert 
    into
        order_item
        (delivery_time, instructions, order_id, product_id, quantity, rush_order_using, status, total_fee) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        order_item
        (delivery_time, instructions, order_id, product_id, quantity, rush_order_using, status, total_fee) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-06-28T22:32:54.664+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T22:32:54.665+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    insert 
    into
        invoice
        (created_at, description, order_id, paid_at, payment_method, payment_status) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        invoice
        (created_at, description, order_id, paid_at, payment_method, payment_status) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-28T22:32:54.665+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T22:32:54.666+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] c.i.ecommerce.service.AuditLogService    : Logging ORDER operation on Order with ID: 21 by user: null
2025-06-28T22:32:54.666+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    insert 
    into
        audit_log
        (action_name, action_type, entity_id, entity_type, note, recorded_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        audit_log
        (action_name, action_type, entity_id, entity_type, note, recorded_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-28T22:32:54.666+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T22:32:54.666+07:00  INFO 74202 --- [demo] [nio-8080-exec-6] c.itss.ecommerce.service.OrderService    : Order created successfully with ID: 21
2025-06-28T22:32:54.674+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    update
        product 
    set
        barcode=?,
        condition=?,
        created_at=?,
        dimensions=?,
        image_url=?,
        import_date=?,
        introduction=?,
        price=?,
        quantity=?,
        rush_order_supported=?,
        title=?,
        updated_at=?,
        weight=? 
    where
        product_id=?
Hibernate: 
    update
        product 
    set
        barcode=?,
        condition=?,
        created_at=?,
        dimensions=?,
        image_url=?,
        import_date=?,
        introduction=?,
        price=?,
        quantity=?,
        rush_order_supported=?,
        title=?,
        updated_at=?,
        weight=? 
    where
        product_id=?
2025-06-28T22:32:54.675+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    update
        product 
    set
        barcode=?,
        condition=?,
        created_at=?,
        dimensions=?,
        image_url=?,
        import_date=?,
        introduction=?,
        price=?,
        quantity=?,
        rush_order_supported=?,
        title=?,
        updated_at=?,
        weight=? 
    where
        product_id=?
Hibernate: 
    update
        product 
    set
        barcode=?,
        condition=?,
        created_at=?,
        dimensions=?,
        image_url=?,
        import_date=?,
        introduction=?,
        price=?,
        quantity=?,
        rush_order_supported=?,
        title=?,
        updated_at=?,
        weight=? 
    where
        product_id=?
2025-06-28T22:32:54.675+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] org.hibernate.SQL                        : 
    update
        product 
    set
        barcode=?,
        condition=?,
        created_at=?,
        dimensions=?,
        image_url=?,
        import_date=?,
        introduction=?,
        price=?,
        quantity=?,
        rush_order_supported=?,
        title=?,
        updated_at=?,
        weight=? 
    where
        product_id=?
Hibernate: 
    update
        product 
    set
        barcode=?,
        condition=?,
        created_at=?,
        dimensions=?,
        image_url=?,
        import_date=?,
        introduction=?,
        price=?,
        quantity=?,
        rush_order_supported=?,
        title=?,
        updated_at=?,
        weight=? 
    where
        product_id=?
Saved Order: 21
2025-06-28T22:32:54.678+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T22:32:54.680+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Order created successfully, data=OrderDTO(orderId=21, totalBeforeV (truncated)...]
2025-06-28T22:32:54.686+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : Completed 201 CREATED
2025-06-28T22:32:54.688+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : OPTIONS "/api/payment/vnpay", parameters={}
2025-06-28T22:32:54.688+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-7] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.vnpay.VNPayController#createPayment(PaymentRequest, HttpServletRequest)
2025-06-28T22:32:54.689+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T22:32:54.690+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : POST "/api/payment/vnpay", parameters={}
2025-06-28T22:32:54.690+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.vnpay.VNPayController#createPayment(PaymentRequest, HttpServletRequest)
2025-06-28T22:32:54.691+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] m.m.a.RequestResponseBodyMethodProcessor : Read "application/json;charset=UTF-8" to [com.itss.ecommerce.dto.vnpay.PaymentRequest@ed62b8a]
2025-06-28T22:32:54.699+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-28T22:32:54.699+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [com.itss.ecommerce.service.VNPayService$PaymentResponse@635b7ed9]
2025-06-28T22:32:54.699+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T22:34:38.895+07:00 DEBUG 74202 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : GET "/api/products", parameters={}
2025-06-28T22:34:38.895+07:00 DEBUG 74202 --- [demo] [io-8080-exec-10] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.ProductController#getAllProducts()
2025-06-28T22:34:38.895+07:00  INFO 74202 --- [demo] [io-8080-exec-10] c.i.e.controller.ProductController       : GET /api/products - Fetching all products
2025-06-28T22:34:38.896+07:00 DEBUG 74202 --- [demo] [io-8080-exec-10] c.itss.ecommerce.service.ProductService  : Fetching all products
2025-06-28T22:34:38.897+07:00 DEBUG 74202 --- [demo] [io-8080-exec-10] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id
2025-06-28T22:34:38.899+07:00 DEBUG 74202 --- [demo] [io-8080-exec-10] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T22:34:38.899+07:00 DEBUG 74202 --- [demo] [io-8080-exec-10] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Retrieved 9 products, data=[ProductDTO(productId=1, title=The Grea (truncated)...]
2025-06-28T22:34:38.901+07:00 DEBUG 74202 --- [demo] [io-8080-exec-10] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T22:34:43.294+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : OPTIONS "/api/cart/check-quantities", parameters={}
2025-06-28T22:34:43.294+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.CartController#checkQuantities(CartCheckRequest)
2025-06-28T22:34:43.295+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T22:34:43.297+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : POST "/api/cart/check-quantities", parameters={}
2025-06-28T22:34:43.297+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.CartController#checkQuantities(CartCheckRequest)
2025-06-28T22:34:43.298+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-2] m.m.a.RequestResponseBodyMethodProcessor : Read "application/json;charset=UTF-8" to [CartCheckRequest(items=[CartCheckRequest.CartItem(productId=9, quantity=2)])]
2025-06-28T22:34:43.299+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-2] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T22:34:43.301+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-2] m.m.a.RequestResponseBodyMethodProcessor : Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-28T22:34:43.301+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-2] m.m.a.RequestResponseBodyMethodProcessor : Writing [CartCheckResponse(ok=true, insufficient=[])]
2025-06-28T22:34:43.302+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T22:35:22.664+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : OPTIONS "/api/orders", parameters={}
2025-06-28T22:35:22.664+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-3] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#createOrder(CreateOrderRequest)
2025-06-28T22:35:22.665+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T22:35:22.666+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : POST "/api/orders", parameters={}
2025-06-28T22:35:22.666+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#createOrder(CreateOrderRequest)
2025-06-28T22:35:22.668+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] m.m.a.RequestResponseBodyMethodProcessor : Read "application/json;charset=UTF-8" to [CreateOrderRequest(cartItems=[CreateOrderRequest.CartItemDTO(productId=9, quantity=2, rushOrder=fals (truncated)...]
2025-06-28T22:35:22.670+07:00  INFO 74202 --- [demo] [nio-8080-exec-4] c.i.e.controller.OrderController         : POST /api/orders - Creating new order with 1 items
2025-06-28T22:35:22.670+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] c.itss.ecommerce.service.ProductService  : Fetching product by ID: 9
2025-06-28T22:35:22.671+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T22:35:22.674+07:00  INFO 74202 --- [demo] [nio-8080-exec-4] c.itss.ecommerce.service.OrderService    : Creating order with 1 items
2025-06-28T22:35:22.674+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    insert 
    into
        delivery_information
        (address, delivery_fee, delivery_message, district, email, name, phone, province, ward) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        delivery_information
        (address, delivery_fee, delivery_message, district, email, name, phone, province, ward) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-28T22:35:22.675+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T22:35:22.676+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    insert 
    into
        order_items
        (created_at, delivery_id, status, total_after_vat, total_before_vat, updated_at, vat_percentage) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        order_items
        (created_at, delivery_id, status, total_after_vat, total_before_vat, updated_at, vat_percentage) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-28T22:35:22.676+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T22:35:22.677+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    insert 
    into
        order_item
        (delivery_time, instructions, order_id, product_id, quantity, rush_order_using, status, total_fee) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        order_item
        (delivery_time, instructions, order_id, product_id, quantity, rush_order_using, status, total_fee) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-06-28T22:35:22.677+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T22:35:22.677+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    insert 
    into
        invoice
        (created_at, description, order_id, paid_at, payment_method, payment_status) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        invoice
        (created_at, description, order_id, paid_at, payment_method, payment_status) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-28T22:35:22.677+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T22:35:22.678+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] c.i.ecommerce.service.AuditLogService    : Logging ORDER operation on Order with ID: 22 by user: null
2025-06-28T22:35:22.678+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    insert 
    into
        audit_log
        (action_name, action_type, entity_id, entity_type, note, recorded_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        audit_log
        (action_name, action_type, entity_id, entity_type, note, recorded_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-28T22:35:22.678+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T22:35:22.678+07:00  INFO 74202 --- [demo] [nio-8080-exec-4] c.itss.ecommerce.service.OrderService    : Order created successfully with ID: 22
2025-06-28T22:35:22.679+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] org.hibernate.SQL                        : 
    update
        product 
    set
        barcode=?,
        condition=?,
        created_at=?,
        dimensions=?,
        image_url=?,
        import_date=?,
        introduction=?,
        price=?,
        quantity=?,
        rush_order_supported=?,
        title=?,
        updated_at=?,
        weight=? 
    where
        product_id=?
Hibernate: 
    update
        product 
    set
        barcode=?,
        condition=?,
        created_at=?,
        dimensions=?,
        image_url=?,
        import_date=?,
        introduction=?,
        price=?,
        quantity=?,
        rush_order_supported=?,
        title=?,
        updated_at=?,
        weight=? 
    where
        product_id=?
Saved Order: 22
2025-06-28T22:35:22.680+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T22:35:22.681+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Order created successfully, data=OrderDTO(orderId=22, totalBeforeV (truncated)...]
2025-06-28T22:35:22.681+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed 201 CREATED
2025-06-28T22:35:22.683+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : OPTIONS "/api/payment/vnpay", parameters={}
2025-06-28T22:35:22.683+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-5] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.vnpay.VNPayController#createPayment(PaymentRequest, HttpServletRequest)
2025-06-28T22:35:22.684+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T22:35:22.684+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : POST "/api/payment/vnpay", parameters={}
2025-06-28T22:35:22.685+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.vnpay.VNPayController#createPayment(PaymentRequest, HttpServletRequest)
2025-06-28T22:35:22.685+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] m.m.a.RequestResponseBodyMethodProcessor : Read "application/json;charset=UTF-8" to [com.itss.ecommerce.dto.vnpay.PaymentRequest@57c09278]
2025-06-28T22:35:22.686+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-28T22:35:22.686+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [com.itss.ecommerce.service.VNPayService$PaymentResponse@3243d5e3]
2025-06-28T22:35:22.686+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T22:35:48.844+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : POST "/api/cart/check-quantities", parameters={}
2025-06-28T22:35:48.845+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-7] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.CartController#checkQuantities(CartCheckRequest)
2025-06-28T22:35:48.846+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-7] m.m.a.RequestResponseBodyMethodProcessor : Read "application/json;charset=UTF-8" to [CartCheckRequest(items=[CartCheckRequest.CartItem(productId=9, quantity=2)])]
2025-06-28T22:35:48.848+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-7] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T22:35:48.850+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-7] m.m.a.RequestResponseBodyMethodProcessor : Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-28T22:35:48.850+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-7] m.m.a.RequestResponseBodyMethodProcessor : Writing [CartCheckResponse(ok=true, insufficient=[])]
2025-06-28T22:35:48.850+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
2025-06-28T22:36:08.982+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : POST "/api/orders", parameters={}
2025-06-28T22:36:08.982+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.OrderController#createOrder(CreateOrderRequest)
2025-06-28T22:36:08.984+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] m.m.a.RequestResponseBodyMethodProcessor : Read "application/json;charset=UTF-8" to [CreateOrderRequest(cartItems=[CreateOrderRequest.CartItemDTO(productId=9, quantity=2, rushOrder=fals (truncated)...]
2025-06-28T22:36:08.987+07:00  INFO 74202 --- [demo] [nio-8080-exec-8] c.i.e.controller.OrderController         : POST /api/orders - Creating new order with 1 items
2025-06-28T22:36:08.987+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] c.itss.ecommerce.service.ProductService  : Fetching product by ID: 9
2025-06-28T22:36:08.988+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
Hibernate: 
    select
        p1_0.product_id,
        p1_0.type,
        p1_0.barcode,
        p1_0.condition,
        p1_0.created_at,
        p1_0.dimensions,
        p1_0.image_url,
        p1_0.import_date,
        p1_0.introduction,
        p1_0.price,
        p1_0.quantity,
        p1_0.rush_order_supported,
        p1_0.title,
        p1_0.updated_at,
        p1_0.weight,
        p1_1.authors,
        p1_1.cover_type,
        p1_1.genre,
        p1_1.page_count,
        p1_1.publication_date,
        p1_1.publishers,
        p1_2.artists,
        p1_2.genre,
        p1_2.record_label,
        p1_2.release_date,
        p1_2.track_list,
        p1_3.directors,
        p1_3.duration_minutes,
        p1_3.dvd_type,
        p1_3.genre,
        p1_3.rating,
        p1_3.release_date,
        p1_3.studio,
        p1_4.artist,
        p1_4.music_type,
        p1_4.record_label,
        p1_4.release_date,
        p1_4.rpm,
        p1_4.size_inches,
        p1_4.sleeve_condition,
        p1_4.tracklist,
        p1_4.vinyl_condition 
    from
        product p1_0 
    left join
        book p1_1 
            on p1_0.product_id=p1_1.product_id 
    left join
        cd p1_2 
            on p1_0.product_id=p1_2.product_id 
    left join
        dvd p1_3 
            on p1_0.product_id=p1_3.product_id 
    left join
        lp p1_4 
            on p1_0.product_id=p1_4.product_id 
    where
        p1_0.product_id=?
2025-06-28T22:36:08.989+07:00  INFO 74202 --- [demo] [nio-8080-exec-8] c.itss.ecommerce.service.OrderService    : Creating order with 1 items
2025-06-28T22:36:08.990+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    insert 
    into
        delivery_information
        (address, delivery_fee, delivery_message, district, email, name, phone, province, ward) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        delivery_information
        (address, delivery_fee, delivery_message, district, email, name, phone, province, ward) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-28T22:36:08.991+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T22:36:08.992+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    insert 
    into
        order_items
        (created_at, delivery_id, status, total_after_vat, total_before_vat, updated_at, vat_percentage) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        order_items
        (created_at, delivery_id, status, total_after_vat, total_before_vat, updated_at, vat_percentage) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-28T22:36:08.992+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T22:36:08.992+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    insert 
    into
        order_item
        (delivery_time, instructions, order_id, product_id, quantity, rush_order_using, status, total_fee) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        order_item
        (delivery_time, instructions, order_id, product_id, quantity, rush_order_using, status, total_fee) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-06-28T22:36:08.993+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T22:36:08.993+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    insert 
    into
        invoice
        (created_at, description, order_id, paid_at, payment_method, payment_status) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        invoice
        (created_at, description, order_id, paid_at, payment_method, payment_status) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-28T22:36:08.994+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T22:36:08.994+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] c.i.ecommerce.service.AuditLogService    : Logging ORDER operation on Order with ID: 23 by user: null
2025-06-28T22:36:08.994+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    insert 
    into
        audit_log
        (action_name, action_type, entity_id, entity_type, note, recorded_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        audit_log
        (action_name, action_type, entity_id, entity_type, note, recorded_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-28T22:36:08.995+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    select
        last_insert_rowid()
Hibernate: 
    select
        last_insert_rowid()
2025-06-28T22:36:08.995+07:00  INFO 74202 --- [demo] [nio-8080-exec-8] c.itss.ecommerce.service.OrderService    : Order created successfully with ID: 23
2025-06-28T22:36:08.996+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] org.hibernate.SQL                        : 
    update
        product 
    set
        barcode=?,
        condition=?,
        created_at=?,
        dimensions=?,
        image_url=?,
        import_date=?,
        introduction=?,
        price=?,
        quantity=?,
        rush_order_supported=?,
        title=?,
        updated_at=?,
        weight=? 
    where
        product_id=?
Hibernate: 
    update
        product 
    set
        barcode=?,
        condition=?,
        created_at=?,
        dimensions=?,
        image_url=?,
        import_date=?,
        introduction=?,
        price=?,
        quantity=?,
        rush_order_supported=?,
        title=?,
        updated_at=?,
        weight=? 
    where
        product_id=?
Saved Order: 23
2025-06-28T22:36:08.998+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2025-06-28T22:36:08.999+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [ApiResponse(success=true, message=Order created successfully, data=OrderDTO(orderId=23, totalBeforeV (truncated)...]
2025-06-28T22:36:08.999+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-8] o.s.web.servlet.DispatcherServlet        : Completed 201 CREATED
2025-06-28T22:36:09.001+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : POST "/api/payment/vnpay", parameters={}
2025-06-28T22:36:09.001+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-9] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.itss.ecommerce.controller.vnpay.VNPayController#createPayment(PaymentRequest, HttpServletRequest)
2025-06-28T22:36:09.002+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-9] m.m.a.RequestResponseBodyMethodProcessor : Read "application/json;charset=UTF-8" to [com.itss.ecommerce.dto.vnpay.PaymentRequest@5ec7c3a]
2025-06-28T22:36:09.002+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-28T22:36:09.003+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-9] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [com.itss.ecommerce.service.VNPayService$PaymentResponse@b2b92f7]
2025-06-28T22:36:09.003+07:00 DEBUG 74202 --- [demo] [nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
